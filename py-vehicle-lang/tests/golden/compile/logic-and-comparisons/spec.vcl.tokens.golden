Token.Comment	'-- Testing all logical operatives and comparisons\n'
Token.Space	'\n'
Token.Keyword.Declaration	'@network'
Token.Space	'\n'
Token.Name	'f'
Token.Space	' '
Token.Punctuation	':'
Token.Space	' '
Token.Name	'Tensor'
Token.Space	' '
Token.Keyword.Type	'Rat'
Token.Space	' '
Token.Operator	'['
Token.Literal.Number.Integer	'1'
Token.Operator	']'
Token.Space	' '
Token.Operator	'->'
Token.Space	' '
Token.Name	'Tensor'
Token.Space	' '
Token.Keyword.Type	'Rat'
Token.Space	' '
Token.Operator	'['
Token.Literal.Number.Integer	'1'
Token.Operator	']'
Token.Space	'\n\n'
Token.Keyword.Declaration	'@property'
Token.Space	'\n'
Token.Name	'test1'
Token.Space	' '
Token.Punctuation	':'
Token.Space	' '
Token.Keyword.Type	'Bool'
Token.Space	'\n'
Token.Name	'test1'
Token.Space	' '
Token.Punctuation	'='
Token.Space	' '
Token.Keyword	'exists'
Token.Space	' '
Token.Name	'a'
Token.Space	' '
Token.Punctuation	'.'
Token.Space	' '
Token.Name	'a'
Token.Space	' '
Token.Operator	'<='
Token.Space	' '
Token.Literal.Number.Integer	'0'
Token.Space	' '
Token.Operator.Word	'or'
Token.Space	' '
Token.Name	'f'
Token.Space	' '
Token.Operator	'['
Token.Name	'a'
Token.Space	' '
Token.Operator	'+'
Token.Space	' '
Token.Literal.Number.Integer	'2'
Token.Operator	']'
Token.Space	' '
Token.Operator	'=='
Token.Space	' '
Token.Operator	'['
Token.Literal.Number.Integer	'0'
Token.Operator	']'
Token.Space	'\n\n'
Token.Keyword.Declaration	'@network'
Token.Space	'\n'
Token.Name	'g'
Token.Space	' '
Token.Punctuation	':'
Token.Space	' '
Token.Name	'Tensor'
Token.Space	' '
Token.Keyword.Type	'Rat'
Token.Space	' '
Token.Operator	'['
Token.Literal.Number.Integer	'2'
Token.Operator	']'
Token.Space	' '
Token.Operator	'->'
Token.Space	' '
Token.Name	'Tensor'
Token.Space	' '
Token.Keyword.Type	'Rat'
Token.Space	' '
Token.Operator	'['
Token.Literal.Number.Integer	'1'
Token.Operator	']'
Token.Space	'\n\n'
Token.Keyword.Declaration	'@property'
Token.Space	'\n'
Token.Name	'test2'
Token.Space	' '
Token.Punctuation	':'
Token.Space	' '
Token.Keyword.Type	'Bool'
Token.Space	'\n'
Token.Name	'test2'
Token.Space	' '
Token.Punctuation	'='
Token.Space	' '
Token.Keyword	'exists'
Token.Space	' '
Token.Name	'a'
Token.Space	' '
Token.Name	'b'
Token.Space	' '
Token.Punctuation	'.'
Token.Space	' '
Token.Name	'a'
Token.Space	' '
Token.Operator	'>='
Token.Space	' '
Token.Literal.Number.Integer	'1'
Token.Space	' '
Token.Operator.Word	'and'
Token.Space	' '
Token.Operator.Word	'not'
Token.Space	' '
Token.Punctuation	'('
Token.Name	'b'
Token.Space	' '
Token.Operator	'>'
Token.Space	' '
Token.Name	'a'
Token.Punctuation	')'
Token.Space	' '
Token.Operator.Word	'and'
Token.Space	' '
Token.Name	'g'
Token.Space	' '
Token.Operator	'['
Token.Name	'a'
Token.Space	' '
Token.Operator	'+'
Token.Space	' '
Token.Name	'b'
Token.Space	' '
Token.Punctuation	','
Token.Space	' '
Token.Name	'a'
Token.Space	' '
Token.Operator	'+'
Token.Space	' '
Token.Literal.Number.Integer	'2'
Token.Space	' '
Token.Operator	'*'
Token.Space	' '
Token.Name	'b'
Token.Operator	']'
Token.Space	' '
Token.Operator	'=='
Token.Space	' '
Token.Operator	'['
Token.Literal.Number.Integer	'0'
Token.Operator	']'
Token.Space	'\n\n'
Token.Keyword.Declaration	'@property'
Token.Space	'\n'
Token.Name	'test3'
Token.Space	' '
Token.Punctuation	':'
Token.Space	' '
Token.Keyword.Type	'Bool'
Token.Space	'\n'
Token.Name	'test3'
Token.Space	' '
Token.Punctuation	'='
Token.Space	' '
Token.Keyword	'forall'
Token.Space	' '
Token.Name	'a'
Token.Space	' '
Token.Name	'b'
Token.Punctuation	'.'
Token.Space	' '
Token.Operator.Word	'not'
Token.Space	' '
Token.Punctuation	'('
Token.Punctuation	'('
Token.Name	'a'
Token.Space	' '
Token.Operator	'<'
Token.Space	' '
Token.Literal.Number.Integer	'0'
Token.Space	' '
Token.Operator.Word	'and'
Token.Space	' '
Token.Name	'b'
Token.Space	' '
Token.Operator	'!='
Token.Space	' '
Token.Literal.Number.Integer	'0'
Token.Punctuation	')'
Token.Space	' '
Token.Operator.Word	'or'
Token.Space	' '
Token.Name	'g'
Token.Space	' '
Token.Operator	'['
Token.Name	'a'
Token.Punctuation	','
Token.Space	' '
Token.Name	'b'
Token.Operator	']'
Token.Space	' '
Token.Operator	'!='
Token.Space	' '
Token.Operator	'['
Token.Literal.Number.Integer	'0'
Token.Operator	']'
Token.Punctuation	')'
Token.Space	'\n'
