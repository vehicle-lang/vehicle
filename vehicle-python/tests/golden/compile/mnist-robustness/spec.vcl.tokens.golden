Token.Comment	'--------------------------------------------------------------------------------\n'
Token.Comment	'-- Inputs and outputs\n'
Token.Space	'\n'
Token.Comment	'-- Define the type for our input images\n'
Token.Keyword	'type'
Token.Space	' '
Token.Name	'Image'
Token.Space	' '
Token.Punctuation	'='
Token.Space	' '
Token.Name	'Tensor'
Token.Space	' '
Token.Keyword.Type	'Rat'
Token.Space	' '
Token.Operator	'['
Token.Literal.Number.Integer	'28'
Token.Punctuation	','
Token.Space	' '
Token.Literal.Number.Integer	'28'
Token.Operator	']'
Token.Space	'\n\n'
Token.Comment	'-- The type of the output labels\n'
Token.Comment	'-- i.e a number between 0 and 9, one for each digit\n'
Token.Keyword	'type'
Token.Space	' '
Token.Name	'Label'
Token.Space	' '
Token.Punctuation	'='
Token.Space	' '
Token.Keyword.Type	'Index'
Token.Space	' '
Token.Literal.Number.Integer	'10'
Token.Space	'\n\n'
Token.Comment	'-- A predicate that states that all the pixel values in a given image are\n'
Token.Comment	'-- in the range 0.0 to 1.0\n'
Token.Name	'validImage'
Token.Space	' '
Token.Punctuation	':'
Token.Space	' '
Token.Name	'Image'
Token.Space	' '
Token.Operator	'->'
Token.Space	' '
Token.Keyword.Type	'Bool'
Token.Space	'\n'
Token.Name	'validImage'
Token.Space	' '
Token.Name	'x'
Token.Space	' '
Token.Punctuation	'='
Token.Space	' '
Token.Keyword	'forall'
Token.Space	' '
Token.Name	'i'
Token.Space	' '
Token.Name	'j'
Token.Space	' '
Token.Punctuation	'.'
Token.Space	' '
Token.Literal.Number.Integer	'0'
Token.Space	' '
Token.Operator	'<='
Token.Space	' '
Token.Name	'x'
Token.Space	' '
Token.Operator	'!'
Token.Space	' '
Token.Name	'i'
Token.Space	' '
Token.Operator	'!'
Token.Space	' '
Token.Name	'j'
Token.Space	' '
Token.Operator	'<='
Token.Space	' '
Token.Literal.Number.Integer	'1'
Token.Space	'\n\n'
Token.Comment	'--------------------------------------------------------------------------------\n'
Token.Comment	'-- Network\n'
Token.Space	'\n'
Token.Comment	'-- Declare the network used to classify images. The output of the network is a\n'
Token.Comment	'-- score for each of the digits 0 to 9.\n'
Token.Keyword.Declaration	'@network'
Token.Space	'\n'
Token.Name	'classifier'
Token.Space	' '
Token.Punctuation	':'
Token.Space	' '
Token.Name	'Image'
Token.Space	' '
Token.Operator	'->'
Token.Space	' '
Token.Keyword.Type	'Vector'
Token.Space	' '
Token.Keyword.Type	'Rat'
Token.Space	' '
Token.Literal.Number.Integer	'10'
Token.Space	'\n\n'
Token.Comment	'-- The classifier advises that input image `x` has label `i` if the score\n'
Token.Comment	'-- for label `i` is greater than the score of any other label `j`.\n'
Token.Name	'advises'
Token.Space	' '
Token.Punctuation	':'
Token.Space	' '
Token.Name	'Image'
Token.Space	' '
Token.Operator	'->'
Token.Space	' '
Token.Name	'Label'
Token.Space	' '
Token.Operator	'->'
Token.Space	' '
Token.Keyword.Type	'Bool'
Token.Space	'\n'
Token.Name	'advises'
Token.Space	' '
Token.Name	'x'
Token.Space	' '
Token.Name	'i'
Token.Space	' '
Token.Punctuation	'='
Token.Space	' '
Token.Keyword	'forall'
Token.Space	' '
Token.Name	'j'
Token.Space	' '
Token.Punctuation	'.'
Token.Space	' '
Token.Name	'j'
Token.Space	' '
Token.Operator	'!='
Token.Space	' '
Token.Name	'i'
Token.Space	' '
Token.Operator	'=>'
Token.Space	' '
Token.Name	'classifier'
Token.Space	' '
Token.Name	'x'
Token.Space	' '
Token.Operator	'!'
Token.Space	' '
Token.Name	'i'
Token.Space	' '
Token.Operator	'>'
Token.Space	' '
Token.Name	'classifier'
Token.Space	' '
Token.Name	'x'
Token.Space	' '
Token.Operator	'!'
Token.Space	' '
Token.Name	'j'
Token.Space	'\n\n'
Token.Comment	'--------------------------------------------------------------------------------\n'
Token.Comment	'-- Definition of robustness around a point\n'
Token.Space	'\n'
Token.Comment	'-- First we define the parameter `epsilon` that will represent the radius of the\n'
Token.Comment	'-- ball that we want the network to be robust in. Note that we declare this as\n'
Token.Comment	'-- a parameter which allows the value of `epsilon` to be specified at compile\n'
Token.Comment	'-- time rather than be fixed in the specification.\n'
Token.Keyword.Declaration	'@parameter'
Token.Space	'\n'
Token.Name	'epsilon'
Token.Space	' '
Token.Punctuation	':'
Token.Space	' '
Token.Keyword.Type	'Rat'
Token.Space	'\n\n'
Token.Comment	'-- Next we define what it means for an image `x` to be in a ball of\n'
Token.Comment	'-- size epsilon around 0.\n'
Token.Name	'boundedByEpsilon'
Token.Space	' '
Token.Punctuation	':'
Token.Space	' '
Token.Name	'Image'
Token.Space	' '
Token.Operator	'->'
Token.Space	' '
Token.Keyword.Type	'Bool'
Token.Space	'\n'
Token.Name	'boundedByEpsilon'
Token.Space	' '
Token.Name	'x'
Token.Space	' '
Token.Punctuation	'='
Token.Space	' '
Token.Keyword	'forall'
Token.Space	' '
Token.Name	'i'
Token.Space	' '
Token.Name	'j'
Token.Space	' '
Token.Punctuation	'.'
Token.Space	' '
Token.Operator	'-'
Token.Name	'epsilon'
Token.Space	' '
Token.Operator	'<='
Token.Space	' '
Token.Name	'x'
Token.Space	' '
Token.Operator	'!'
Token.Space	' '
Token.Name	'i'
Token.Space	' '
Token.Operator	'!'
Token.Space	' '
Token.Name	'j'
Token.Space	' '
Token.Operator	'<='
Token.Space	' '
Token.Name	'epsilon'
Token.Space	'\n\n'
Token.Comment	'-- We now define what it means for the network to be robust around an image `x`\n'
Token.Comment	'-- that should be classified as `y`. Namely, that for any perturbation no greater\n'
Token.Comment	'-- than epsilon then if the perturbed image is still a valid image then the\n'
Token.Comment	'-- network should still advise label `y` for the perturbed version of `x`.\n'
Token.Name	'robustAround'
Token.Space	' '
Token.Punctuation	':'
Token.Space	' '
Token.Name	'Image'
Token.Space	' '
Token.Operator	'->'
Token.Space	' '
Token.Name	'Label'
Token.Space	' '
Token.Operator	'->'
Token.Space	' '
Token.Keyword.Type	'Bool'
Token.Space	'\n'
Token.Name	'robustAround'
Token.Space	' '
Token.Name	'image'
Token.Space	' '
Token.Name	'label'
Token.Space	' '
Token.Punctuation	'='
Token.Space	' '
Token.Keyword	'forall'
Token.Space	' '
Token.Name	'pertubation'
Token.Space	' '
Token.Punctuation	'.'
Token.Space	'\n  '
Token.Keyword	'let'
Token.Space	' '
Token.Name	'perturbedImage'
Token.Space	' '
Token.Punctuation	'='
Token.Space	' '
Token.Name	'image'
Token.Space	' '
Token.Operator	'-'
Token.Space	' '
Token.Name	'pertubation'
Token.Space	' '
Token.Keyword	'in'
Token.Space	'\n  '
Token.Name	'boundedByEpsilon'
Token.Space	' '
Token.Name	'pertubation'
Token.Space	' '
Token.Operator.Word	'and'
Token.Space	' '
Token.Name	'validImage'
Token.Space	' '
Token.Name	'perturbedImage'
Token.Space	' '
Token.Operator	'=>'
Token.Space	'\n    '
Token.Name	'advises'
Token.Space	' '
Token.Name	'perturbedImage'
Token.Space	' '
Token.Name	'label'
Token.Space	'\n\n'
Token.Comment	'--------------------------------------------------------------------------------\n'
Token.Comment	'-- Robustness with respect to a dataset\n'
Token.Space	'\n'
Token.Comment	'-- We only really care about the network being robust on the set of images it\n'
Token.Comment	'-- will encounter. Indeed it is much more challenging to expect the network\n'
Token.Comment	'-- to be robust around all possible images. After all most images will be just\n'
Token.Comment	'-- be random noise.\n'
Token.Space	'\n'
Token.Comment	'-- Unfortunately we can\'t characterise the set of "reasonable" input images.\n'
Token.Comment	'-- Instead we approximate it using the training dataset, and ask that the\n'
Token.Comment	'-- network is robust around images in the training dataset.\n'
Token.Space	'\n'
Token.Comment	'-- We first specify parameter `n` the size of the training dataset. Unlike\n'
Token.Comment	'-- the earlier parameter `epsilon`, we set the `infer` option of the\n'
Token.Comment	"-- parameter `n` to 'True'. This means that it does not need to be provided\n"
Token.Comment	'--  manually but instead will be automatically inferred by the compiler.\n'
Token.Comment	'-- In this case it will be inferred from the training datasets.\n'
Token.Keyword.Declaration	'@parameter'
Token.Punctuation	'('
Token.Name	'infer'
Token.Punctuation	'='
Token.Name.Builtin	'True'
Token.Punctuation	')'
Token.Space	'\n'
Token.Name	'n'
Token.Space	' '
Token.Punctuation	':'
Token.Space	' '
Token.Keyword.Type	'Nat'
Token.Space	'\n\n'
Token.Comment	'-- We next declare two datasets, the training images and the corresponding\n'
Token.Comment	'-- training labels. Note that we use the previously declared parameter `n`\n'
Token.Comment	'-- to enforce that they are the same size.\n'
Token.Keyword.Declaration	'@dataset'
Token.Space	'\n'
Token.Name	'trainingImages'
Token.Space	' '
Token.Punctuation	':'
Token.Space	' '
Token.Keyword.Type	'Vector'
Token.Space	' '
Token.Name	'Image'
Token.Space	' '
Token.Name	'n'
Token.Space	'\n\n'
Token.Keyword.Declaration	'@dataset'
Token.Space	'\n'
Token.Name	'trainingLabels'
Token.Space	' '
Token.Punctuation	':'
Token.Space	' '
Token.Keyword.Type	'Vector'
Token.Space	' '
Token.Name	'Label'
Token.Space	' '
Token.Name	'n'
Token.Space	'\n\n'
Token.Comment	'-- We then say that the network is robust if it is robust around every pair\n'
Token.Comment	'-- of input images and output labels. Note the use of the `foreach`\n'
Token.Comment	'-- keyword when quantifying over the index `i` in the dataset. Whereas `forall`\n'
Token.Comment	'-- would return a single `Bool`, `foreach` constructs a `Vector` of booleans,\n'
Token.Comment	'-- ensuring that Vehicle will report on the verification status of each image in\n'
Token.Comment	'-- the dataset separately. If `forall` was omitted, Vehicle would only\n'
Token.Comment	'-- report if the network was robust around *every* image in the dataset, a\n'
Token.Comment	'-- state of affairs which is unlikely to be true.\n'
Token.Keyword.Declaration	'@property'
Token.Space	'\n'
Token.Name	'robust'
Token.Space	' '
Token.Punctuation	':'
Token.Space	' '
Token.Keyword.Type	'Vector'
Token.Space	' '
Token.Keyword.Type	'Bool'
Token.Space	' '
Token.Name	'n'
Token.Space	'\n'
Token.Name	'robust'
Token.Space	' '
Token.Punctuation	'='
Token.Space	' '
Token.Keyword	'foreach'
Token.Space	' '
Token.Name	'i'
Token.Space	' '
Token.Punctuation	'.'
Token.Space	' '
Token.Name	'robustAround'
Token.Space	' '
Token.Punctuation	'('
Token.Name	'trainingImages'
Token.Space	' '
Token.Operator	'!'
Token.Space	' '
Token.Name	'i'
Token.Punctuation	')'
Token.Space	' '
Token.Punctuation	'('
Token.Name	'trainingLabels'
Token.Space	' '
Token.Operator	'!'
Token.Space	' '
Token.Name	'i'
Token.Punctuation	')'
Token.Space	'\n'
