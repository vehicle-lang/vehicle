vectorToVector : Vector Rat 1 -> Vector Rat 1;
vectorToVector xs = xs

type Tensor A ds = fold (\ d -> \ t -> Vector t d) A ds

vectorToList : Vector Nat 1 -> List Nat;
vectorToList = (\ {A} -> \ {B} -> \ f -> dfold (\ {m} -> f)) (\ x -> \ xs -> x :: xs) nil

@property;
monotonic : forallT (f : Tensor Rat (1 :: nil) -> Tensor Rat (1 :: nil)) . Bool;
monotonic f = forall x1 . forall x2 . x1 <= x2 => f [x1] ! 0 <= f [x2] ! 0