bigAnd : List Rat -> Rat;
bigAnd = fold (\ x -> \ y -> x + y) 0.0

type Tensor A ds = fold (\ d -> \ t -> Vector t d) A ds

mapList : (Rat -> Rat) -> List Rat -> List Rat;
mapList f = fold (\ x -> \ xs -> f x :: xs) nil

@property;
monotonic : forallT (f : Tensor Rat (1 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
monotonic f = bigAnd (mapList (\ x1 -> bigAnd (mapList (\ x2 -> max 0.0 (max 0.0 (x1 - x2) * max 0.0 (f [x1] ! 0 - f [x2] ! 0))) sample[x2][x1, f])) sample[x1][f])
