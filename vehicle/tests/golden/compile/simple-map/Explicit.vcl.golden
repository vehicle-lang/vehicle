vectorToVector : Vector Nat -> Vector Nat;
vectorToVector xs = xs

mapVector : (Nat -> Nat) -> Vector Nat -> Vector Nat;
mapVector f = dfold {Nat} {Vector Nat} (\ x -> \ xs -> f x :: xs) []

vectorToList : Vector Nat -> List Nat;
vectorToList = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ xs -> x :: xs) nil

mapList : (Nat -> Nat) -> List Nat -> List Nat;
mapList f = fold (\ x -> \ xs -> f x :: xs) nil

mapListId : List Nat;
mapListId = mapList (\ x -> x) (1 :: nil)

mapVec : Vector Nat;
mapVec = mapVector (\ x -> x) [1]