bigAnd : Vector Bool -> Bool;
bigAnd _x0 = fold (\ x -> \ y -> x and y) True _x0

@noinline;
equalsVector : Vector Rat -> Vector Rat -> Bool;
equalsVector xs ys = bigAnd (zipWith (\ x -> \ y -> x == y) xs ys)

@property;
test1 : forallT (f : Vector Rat -> Vector Rat) . Bool;
test1 f = exists a . a >= 0.0 and equalsVector (f [a + 2.0]) [0.0]

@property;
test2 : forallT (g : Vector Rat -> Vector Rat) . Bool;
test2 g = exists a . exists b . a >= 1.0 and b >= a and equalsVector (g [a + b, a + 2.0 * b]) [0.0]