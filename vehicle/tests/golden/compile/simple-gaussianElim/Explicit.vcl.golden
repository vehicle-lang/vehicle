<<<<<<< HEAD
bigAnd : (\ A -> Vector A 1) Bool -> Bool;
bigAnd _x0 = (\ {A} -> \ {B} -> \ f -> dfold (\ {m} -> f)) (\ x -> \ y -> x and y) True _x0

mapVector : (Index 1 -> Bool) -> Vector (Index 1) 1 -> Vector Bool 1;
mapVector f _x0 = dfold {Index 1} {1} {Vector Bool} (\ {l} -> \ x -> \ xs -> f x :: xs) [] _x0

foreachVector : (Index 1 -> Bool) -> Vector Bool 1;
foreachVector f = mapVector f (indices 1)

zipWith : (Rat -> Rat -> Bool) -> Vector Rat 1 -> Vector Rat 1 -> Vector Bool 1;
zipWith f xs ys = foreachVector (\ i -> f (xs ! i) (ys ! i))

=======
bigAnd : (\ A -> Vector A) Bool -> Bool;
bigAnd = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ y -> x and y) True

vectorToVector : Vector Rat -> Vector Rat;
vectorToVector xs = xs

>>>>>>> size-irrelevancy
@noinline;
equalsVector : Vector Rat -> Vector Rat -> Bool;
equalsVector xs ys = bigAnd (zipWith (\ x -> \ y -> x == y) xs ys)

type Tensor A ds = fold (\ d -> \ t -> Vector t) A ds

<<<<<<< HEAD
=======
vectorToList : Vector Nat -> List Nat;
vectorToList = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ xs -> x :: xs) nil

>>>>>>> size-irrelevancy
@property;
test1 : forallT (f : Tensor Rat (1 :: nil) -> Tensor Rat (1 :: nil)) . Bool;
test1 f = exists a . a >= 0.0 and equalsVector (f [a + 2.0]) [0.0]

@property;
test2 : forallT (g : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Bool;
test2 g = exists a . exists b . a >= 1.0 and b >= a and equalsVector (g [a + b, a + 2.0 * b]) [0.0]