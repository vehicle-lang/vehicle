bigAnd : (\ A -> Vector A) Rat -> Rat;
bigAnd _x0 = fold (\ x -> \ y -> x + y) 0.0 _x0

@noinline;
equalsVector : Vector Rat -> Vector Rat -> Rat;
equalsVector xs ys = bigAnd (zipWith (\ x -> \ y -> x == y) xs ys)

type Tensor A ds = fold (\ d -> \ t -> Vector t) A ds

@property;
test1 : forallT (f : Tensor Rat (1 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
test1 f = Optimise[a][min] (*) (\ a -> max 0.0 (0.0 - a) + equalsVector (f [a + 2.0]) [0.0])

@property;
test2 : forallT (g : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
test2 g = Optimise[a][min] (*) (\ a -> Optimise[b][min][a] (*) (\ b -> max 0.0 (1.0 - a) + (max 0.0 (a - b) + equalsVector (g [a + b, a + 2.0 * b]) [0.0])))