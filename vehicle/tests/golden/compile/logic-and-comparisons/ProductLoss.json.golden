bigAnd : (\ A -> Vector A 1) Rat -> Rat;
bigAnd = (\ {A} -> \ {B} -> \ f -> dfold (\ {m} -> f)) (\ x -> \ y -> 1.0 - x * y) 0.0

bigOr : (\ A -> Vector A 1) Rat -> Rat;
bigOr = (\ {A} -> \ {B} -> \ f -> dfold (\ {m} -> f)) (\ x -> \ y -> 1.0 - (x + y - x * y)) 1.0

vectorToVector : Vector Rat 0 -> Vector Rat 0;
vectorToVector xs = xs

mapVector : (Index 1 -> Rat) -> Vector (Index 1) 1 -> Vector Rat 1;
mapVector f = dfold {Index 1} {1} {Vector Rat} (\ {l} -> \ x -> \ xs -> f x :: xs) []

foreachVector : (Index 1 -> Rat) -> Vector Rat 1;
foreachVector f = mapVector f (indices 1)

zipWith : (Rat -> Rat -> Rat) -> Vector Rat 1 -> Vector Rat 1 -> Vector Rat 1;
zipWith f xs ys = foreachVector (\ i -> f (xs ! i) (ys ! i))

@noinline;
equalsVector : Vector Rat 1 -> Vector Rat 1 -> Rat;
equalsVector xs ys = bigAnd (zipWith (\ x -> \ y -> x == y) xs ys)

notEqualsVector : Vector Rat 1 -> Vector Rat 1 -> Rat;
notEqualsVector xs ys = bigOr (zipWith (\ x -> \ y -> x != y) xs ys)

type Tensor A ds = fold (\ d -> \ t -> Vector t d) A ds

vectorToList : Vector Nat 1 -> List Nat;
vectorToList = (\ {A} -> \ {B} -> \ f -> dfold (\ {m} -> f)) (\ x -> \ xs -> x :: xs) nil

mapList : (Rat -> Rat) -> List Rat -> List Rat;
mapList f = fold (\ x -> \ xs -> f x :: xs) nil

@property;
test1 : forallT (f : Tensor Rat (1 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
test1 f = bigOr (mapList (\ a -> 1.0 - (max 0.0 (a - 0.0) + equalsVector (f [a + 2.0]) [0.0] - max 0.0 (a - 0.0) * equalsVector (f [a + 2.0]) [0.0])) sample[a][f])

@property;
test2 : forallT (g : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
test2 g = bigOr (mapList (\ a -> bigOr (mapList (\ b -> 1.0 - max 0.0 (1.0 - a) * (1.0 - (1.0 - max 0.0 (a - b)) * equalsVector (g [a + b, a + 2.0 * b]) [0.0])) sample[b][a, g])) sample[a][g])

@property;
test3 : forallT (g : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
test3 g = bigAnd (mapList (\ a -> bigAnd (mapList (\ b -> 1.0 - (1.0 - (1.0 - max 0.0 (a - 0.0) * (if b == 0.0 then 1.0 else 0.0) + notEqualsVector (g [a, b]) [0.0] - (1.0 - max 0.0 (a - 0.0) * (if b == 0.0 then 1.0 else 0.0)) * notEqualsVector (g [a, b]) [0.0]))) sample[b][a, g])) sample[a][g])