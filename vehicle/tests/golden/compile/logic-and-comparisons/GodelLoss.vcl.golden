bigAnd__lam_A__Vector_A : (\ A -> Vector A) Rat -> Rat;
bigAnd__lam_A__Vector_A _x0 = fold (\ x -> \ y -> 1.0 - min x y) 0.0 _x0

bigAnd__List : List Rat -> Rat;
bigAnd__List _x0 = fold (\ x -> \ y -> 1.0 - min x y) 0.0 _x0

bigOr__lam_A__Vector_A : (\ A -> Vector A) Rat -> Rat;
bigOr__lam_A__Vector_A _x0 = fold (\ x -> \ y -> 1.0 - max x y) 1.0 _x0

bigOr__List : List Rat -> Rat;
bigOr__List _x0 = fold (\ x -> \ y -> 1.0 - max x y) 1.0 _x0

@noinline;
equalsVector : Vector Rat -> Vector Rat -> Rat;
equalsVector xs ys = bigAnd__lam_A__Vector_A (zipWith (\ x -> \ y -> x == y) xs ys)

@noinline;
notEqualsVector : Vector Rat -> Vector Rat -> Rat;
notEqualsVector xs ys = bigOr__lam_A__Vector_A (zipWith (\ x -> \ y -> x != y) xs ys)

type Tensor A ds = fold (\ d -> \ t -> Vector t) A ds

@property;
test1 : forallT (f : Tensor Rat (1 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
test1 f = bigOr__List (map (\ a -> 1.0 - max (max 0.0 (a - 0.0)) (equalsVector (f [a + 2.0]) [0.0])) sample[a][])

@property;
test2 : forallT (g : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
test2 g = bigOr__List (map (\ a -> bigOr__List (map (\ b -> 1.0 - min (max 0.0 (1.0 - a)) (1.0 - min (1.0 - max 0.0 (a - b)) (equalsVector (g [a + b, a + 2.0 * b]) [0.0]))) sample[b][a])) sample[a][])

@property;
test3 : forallT (g : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
test3 g = bigAnd__List (map (\ a -> bigAnd__List (map (\ b -> 1.0 - (1.0 - max (1.0 - min (max 0.0 (a - 0.0)) (if b == 0.0 then 1.0 else 0.0)) (notEqualsVector (g [a, b]) [0.0]))) sample[b][a])) sample[a][])