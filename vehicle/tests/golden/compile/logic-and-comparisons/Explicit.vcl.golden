bigAnd : (\ A -> Vector A) Bool -> Bool;
bigAnd _x0 = fold (\ x -> \ y -> x and y) True _x0

bigOr : (\ A -> Vector A) Bool -> Bool;
bigOr _x0 = fold (\ x -> \ y -> x or y) False _x0

@noinline;
equalsVector : Vector Rat -> Vector Rat -> Bool;
equalsVector xs ys = bigAnd (zipWith (\ x -> \ y -> x == y) xs ys)

@noinline;
notEqualsVector : Vector Rat -> Vector Rat -> Bool;
notEqualsVector xs ys = bigOr (zipWith (\ x -> \ y -> x != y) xs ys)

type Tensor A ds = fold (\ d -> \ t -> Vector t) A ds

@property;
test1 : forallT (f : Tensor Rat (1 :: nil) -> Tensor Rat (1 :: nil)) . Bool;
test1 f = exists a . a <= 0.0 or equalsVector (f [a + 2.0]) [0.0]

@property;
test2 : forallT (g : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Bool;
test2 g = exists a . exists b . a >= 1.0 and not (b > a) and equalsVector (g [a + b, a + 2.0 * b]) [0.0]

@property;
test3 : forallT (g : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Bool;
test3 g = forall a . forall b . not ((a < 0.0 and b != 0.0) or notEqualsVector (g [a, b]) [0.0])