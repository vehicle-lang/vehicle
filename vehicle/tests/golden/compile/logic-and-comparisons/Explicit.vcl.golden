bigAnd : (\ A -> Vector A 1) Bool -> Bool;
bigAnd = (\ {A} -> \ {B} -> \ f -> dfold (\ {m} -> f)) (\ x -> \ y -> x and y) True

bigOr : (\ A -> Vector A 1) Bool -> Bool;
bigOr = (\ {A} -> \ {B} -> \ f -> dfold (\ {m} -> f)) (\ x -> \ y -> x or y) False

mapVector : (Index 1 -> Bool) -> Vector (Index 1) 1 -> Vector Bool 1;
mapVector f = dfold {Index 1} {1} {Vector Bool} (\ {l} -> \ x -> \ xs -> f x :: xs) []

foreachVector : (Index 1 -> Bool) -> Vector Bool 1;
foreachVector f = mapVector f (indices 1)

zipWith : (Rat -> Rat -> Bool) -> Vector Rat 1 -> Vector Rat 1 -> Vector Bool 1;
zipWith f xs ys = foreachVector (\ i -> f (xs ! i) (ys ! i))

@noinline;
equalsVector : Vector Rat 1 -> Vector Rat 1 -> Bool;
equalsVector xs ys = bigAnd (zipWith (\ x -> \ y -> x == y) xs ys)

notEqualsVector : Vector Rat 1 -> Vector Rat 1 -> Bool;
notEqualsVector xs ys = bigOr (zipWith (\ x -> \ y -> x != y) xs ys)

type Tensor A ds = fold (\ d -> \ t -> Vector t d) A ds

@property;
test1 : forallT (f : Tensor Rat (1 :: nil) -> Tensor Rat (1 :: nil)) . Bool;
test1 f = exists a . a <= 0.0 or equalsVector (f [a + 2.0]) [0.0]

@property;
test2 : forallT (g : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Bool;
test2 g = exists a . exists b . a >= 1.0 and not (b > a) and equalsVector (g [a + b, a + 2.0 * b]) [0.0]

@property;
test3 : forallT (g : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Bool;
test3 g = forall a . forall b . not ((a < 0.0 and b != 0.0) or notEqualsVector (g [a, b]) [0.0])