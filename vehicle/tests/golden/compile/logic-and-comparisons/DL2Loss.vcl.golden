<<<<<<< HEAD
mapList : (Rat -> Rat) -> List Rat -> List Rat;
mapList f _x0 = fold (\ x -> \ xs -> f x :: xs) nil _x0

bigAnd__lam_A__Vector_A_1 : (\ A -> Vector A 1) Rat -> Rat;
bigAnd__lam_A__Vector_A_1 _x0 = (\ {A} -> \ {B} -> \ f -> dfold (\ {m} -> f)) (\ x -> \ y -> x + y) 0.0 _x0

bigAnd__List : List Rat -> Rat;
bigAnd__List _x0 = fold (\ x -> \ y -> x + y) 0.0 _x0

bigOr : List Rat -> Rat;
bigOr _x0 = fold (\ x -> \ y -> x * y) 1.0 _x0

mapVector : (Index 1 -> Rat) -> Vector (Index 1) 1 -> Vector Rat 1;
mapVector f _x0 = dfold {Index 1} {1} {Vector Rat} (\ {l} -> \ x -> \ xs -> f x :: xs) [] _x0

foreachVector : (Index 1 -> Rat) -> Vector Rat 1;
foreachVector f = mapVector f (indices 1)

zipWith : (Rat -> Rat -> Rat) -> Vector Rat 1 -> Vector Rat 1 -> Vector Rat 1;
zipWith f xs ys = foreachVector (\ i -> f (xs ! i) (ys ! i))

@noinline;
equalsVector__Rat__Rat__1 : Vector Rat 1 -> Vector Rat 1 -> Rat;
equalsVector__Rat__Rat__1 xs ys = bigAnd__lam_A__Vector_A_1 (zipWith (\ x -> \ y -> x == y) xs ys)

@noinline;
equalsVector__Rat__Rat__1 : Vector Rat 1 -> Vector Rat 1 -> Rat;
equalsVector__Rat__Rat__1 xs ys = bigAnd__lam_A__Vector_A_1 (zipWith (\ x -> \ y -> x != y) xs ys)
=======
bigAnd : (\ A -> Vector A) Rat -> Rat;
bigAnd = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ y -> x + y) 0.0

bigOr : List Rat -> Rat;
bigOr = fold (\ x -> \ y -> x * y) 1.0

vectorToVector : Vector Rat -> Vector Rat;
vectorToVector xs = xs

@noinline;
equalsVector : Vector Rat -> Vector Rat -> Rat;
equalsVector xs ys = bigAnd (zipWith (\ x -> \ y -> x == y) xs ys)
>>>>>>> size-irrelevancy

type Tensor A ds = fold (\ d -> \ t -> Vector t) A ds

<<<<<<< HEAD
=======
vectorToList : Vector Nat -> List Nat;
vectorToList = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ xs -> x :: xs) nil

mapList : (Rat -> Rat) -> List Rat -> List Rat;
mapList f = fold (\ x -> \ xs -> f x :: xs) nil

>>>>>>> size-irrelevancy
@property;
test1 : forallT (f : Tensor Rat (1 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
test1 f = bigOr (mapList (\ a -> max 0.0 (a - 0.0) * equalsVector__Rat__Rat__1 (f [a + 2.0]) [0.0]) sample[a][])

@property;
test2 : forallT (g : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
test2 g = bigOr (mapList (\ a -> bigOr (mapList (\ b -> max 0.0 (1.0 - a) + (max 0.0 (b - a) + equalsVector__Rat__Rat__1 (g [a + b, a + 2.0 * b]) [0.0])) sample[b][a])) sample[a][])

@property;
test3 : forallT (g : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
test3 g = bigAnd__List (mapList (\ a -> bigAnd__List (mapList (\ b -> max 0.0 (0.0 - a) * (max 0.0 (b - 0.0) + max 0.0 (0.0 - b)) + equalsVector__Rat__Rat__1 (g [a, b]) [0.0]) sample[b][a])) sample[a][])