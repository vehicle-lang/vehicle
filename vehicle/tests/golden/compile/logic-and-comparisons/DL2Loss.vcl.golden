bigAnd : Vector Rat -> Rat;
bigAnd _x0 = fold (\ x -> \ y -> x + y) 0.0 _x0

@noinline;
equalsVector--Rat--Rat : Vector Rat -> Vector Rat -> Rat;
equalsVector--Rat--Rat xs ys = bigAnd (zipWith (\ x -> \ y -> max 0.0 (x - y) + max 0.0 (y - x)) xs ys)

@property;
test1 : forallT (f : Vector Rat -> Vector Rat) . Rat;
test1 f = Optimise[min] (*) (\ a -> (max 0.0 (a - 0.0) + (if a == 0.0 then 1.0 else 0.0)) * equalsVector--Rat--Rat (f [a + 2.0]) [0.0])

@property;
test2 : forallT (g : Vector Rat -> Vector Rat) . Rat;
test2 g = Optimise[min] (*) (\ a -> Optimise[min] (*) (\ b -> max 0.0 (1.0 - a) + (if 1.0 == a then 1.0 else 0.0) + (max 0.0 (b - a) + (if b == a then 1.0 else 0.0) + equalsVector--Rat--Rat (g [a + b, a + 2.0 * b]) [0.0])))

@property;
test3 : forallT (g : Vector Rat -> Vector Rat) . Rat;
test3 g = Optimise[min] (+) (\ a -> Optimise[min] (+) (\ b -> (max 0.0 (0.0 - a) + (if 0.0 == a then 1.0 else 0.0)) * (max 0.0 (b - 0.0) + max 0.0 (0.0 - b)) + equalsVector--Rat--Rat (g [a, b]) [0.0]))