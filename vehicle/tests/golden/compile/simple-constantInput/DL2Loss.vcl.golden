bigAnd : List Rat -> Rat;
bigAnd = fold (\ x -> \ y -> x + y) 0.0

vectorToVector : Vector Rat 2 -> Vector Rat 2;
vectorToVector xs = xs

type Tensor A ds = fold (\ d -> \ t -> Vector t d) A ds

vectorToList : Vector Nat 1 -> List Nat;
vectorToList = (\ {A} -> \ {B} -> \ f -> dfold (\ {m} -> f)) (\ x -> \ xs -> x :: xs) nil

mapList : (Rat -> Rat) -> List Rat -> List Rat;
mapList f = fold (\ x -> \ xs -> f x :: xs) nil

@property;
spec : forallT (f : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
spec f = bigAnd (mapList (\ x -> max 0.0 (0.0 - f [x, 0.0] ! 0)) sample[x][f])