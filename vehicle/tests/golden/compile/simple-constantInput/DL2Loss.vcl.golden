mapList : (Rat -> Rat) -> List Rat -> List Rat;
mapList f _x0 = fold (\ x -> \ xs -> f x :: xs) nil _x0

bigAnd : List Rat -> Rat;
bigAnd _x0 = fold (\ x -> \ y -> x + y) 0.0 _x0

type Tensor A ds = fold (\ d -> \ t -> Vector t d) A ds

@property;
spec : forallT (f : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
spec f = bigAnd (mapList (\ x -> max 0.0 (0.0 - f [x, 0.0] ! 0)) sample[x][])