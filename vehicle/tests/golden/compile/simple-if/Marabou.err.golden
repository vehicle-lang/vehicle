[93m
Warning:  While compiling property 'prop1', in at least one of the generated SAT problems not all network input variables have both a lower and a upper bound. Such queries are not currently supported by the Marabou query format.

In particular, the following input variables are under-specified:
  fâ‚€[input]!0 - bounded below but not above
[m
[93m
Warning:  While compiling property 'prop1', at least one of the generated SAT problems was found to contain a strict inequality (i.e. constraints of the form 'x < y'). Unfortunately the Marabou query format only supports non-strict inequalities (i.e. constraints of the form 'x <= y').

In order to provide support, Vehicle has automatically converted the strict inequalities to non-strict inequalites. This is not sound, but errors will be at most the floating point epsilon used by the verifier, which is usually very small (e.g. 1e-9). However, this may lead to unexpected behaviour (e.g. loss of the law of excluded middle).

See https://github.com/vehicle-lang/vehicle/issues/74 for further details.
[m
[93m
Warning:  While compiling property 'prop2', in at least one of the generated SAT problems not all network input variables have both a lower and a upper bound. Such queries are not currently supported by the Marabou query format.

In particular, the following input variables are under-specified:
  fâ‚€[input]!0 - bounded below but not above
[m
[93m
Warning:  While compiling property 'prop2', at least one of the generated SAT problems was found to contain a strict inequality (i.e. constraints of the form 'x < y'). Unfortunately the Marabou query format only supports non-strict inequalities (i.e. constraints of the form 'x <= y').

In order to provide support, Vehicle has automatically converted the strict inequalities to non-strict inequalites. This is not sound, but errors will be at most the floating point epsilon used by the verifier, which is usually very small (e.g. 1e-9). However, this may lead to unexpected behaviour (e.g. loss of the law of excluded middle).

See https://github.com/vehicle-lang/vehicle/issues/74 for further details.
[m
[93m
Warning:  In property 'prop2' the quantified variable 'x' is not always directly related to the input or output of a network. This is frequently indicative of a bug in the specification.
[m
[93m
Warning:  While compiling property 'prop2', in at least one of the generated SAT problems all network inputs were fixed to be constants. Unfortunately there is a known bug in Marabou that it sometimes erroneously returns 'unsat' for these type of degenerate problems.

See https://github.com/NeuralNetworkVerification/Marabou/issues/670 for details.
[m
[93m
Warning:  While compiling property 'prop3', in at least one of the generated SAT problems not all network input variables have both a lower and a upper bound. Such queries are not currently supported by the Marabou query format.

In particular, the following input variables are under-specified:
  fâ‚€[input]!0 - bounded below but not above
[m
[93m
Warning:  While compiling property 'prop3', at least one of the generated SAT problems was found to contain a strict inequality (i.e. constraints of the form 'x < y'). Unfortunately the Marabou query format only supports non-strict inequalities (i.e. constraints of the form 'x <= y').

In order to provide support, Vehicle has automatically converted the strict inequalities to non-strict inequalites. This is not sound, but errors will be at most the floating point epsilon used by the verifier, which is usually very small (e.g. 1e-9). However, this may lead to unexpected behaviour (e.g. loss of the law of excluded middle).

See https://github.com/vehicle-lang/vehicle/issues/74 for further details.
[m
