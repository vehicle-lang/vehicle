type Tensor A ds = fold (\ d -> \ t -> Vector t) A ds

truthy : Rat -> Loss;
truthy x = max 0.0 (0.5 - x) + (if 0.5 == x then 1.0 else 0.0)

falsey : Rat -> Loss;
falsey x = max 0.0 (x - 0.5) + (if x == 0.5 then 1.0 else 0.0)

validInput : Rat -> Loss;
validInput x = max 0.0 (0.0 - x) + (if 0.0 == x then 1.0 else 0.0) + (max 0.0 (x - 1.0) + (if x == 1.0 then 1.0 else 0.0))

correctOutput : forallT (andGate : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Rat -> Rat -> Loss;
correctOutput andGate x1 x2 = let y = andGate [x1, x2] ! 0 in max 0.0 ((truthy x1 + truthy x2) * truthy y) + (max 0.0 ((truthy x1 + falsey x2) * falsey y) + (max 0.0 ((falsey x1 + truthy x2) * falsey y) + max 0.0 ((falsey x1 + falsey x2) * falsey y)))

@property;
andGateCorrect : forallT (andGate : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Loss;
andGateCorrect andGate = Optimise[min] (+) (\ x1 -> Optimise[min] (+) (\ x2 -> max 0.0 ((validInput x1 + validInput x2) * correctOutput andGate x1 x2)))