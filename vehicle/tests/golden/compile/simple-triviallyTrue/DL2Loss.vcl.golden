mapList : (Vector Rat 1 -> Rat) -> List (Vector Rat 1) -> List Rat;
mapList f _x0 = fold (\ x -> \ xs -> f x :: xs) nil _x0

bigAnd : List Rat -> Rat;
bigAnd _x0 = fold (\ x -> \ y -> x + y) 0.0 _x0

type Tensor A ds = fold (\ d -> \ t -> Vector t d) A ds

@property;
p : forallT (f : Vector Rat 1 -> Vector Rat 1) . Rat;
p f = bigAnd (mapList (\ x -> max 0.0 (0.0 - f x ! 0) + (if 0.0 == f x ! 0 then 1.0 else 0.0)) sample[x][]) * 0.0

@property;
multiProperty : Tensor Rat (2 :: 3 :: nil);
multiProperty = [[0.0, 0.0, 0.0], [1.0, 0.0, 1.0]]