bigAnd : (\ A -> Vector A) Rat -> Rat;
bigAnd = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ y -> x + y) 0.0

bigOr : List Rat -> Rat;
bigOr = fold (\ x -> \ y -> x * y) 1.0

vectorToVector : Vector Rat -> Vector Rat;
vectorToVector xs = xs

@noinline;
equalsVector : Vector Rat -> Vector Rat -> Rat;
equalsVector xs ys = bigAnd (zipWith (\ x -> \ y -> x == y) xs ys)

type Tensor A ds = fold (\ d -> \ t -> Vector t) A ds

vectorToList : Vector Nat -> List Nat;
vectorToList = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ xs -> x :: xs) nil

mapList : (Vector Rat -> Rat) -> List (Vector Rat) -> List Rat;
mapList f = fold (\ x -> \ xs -> f x :: xs) nil

@property;
reachable : forallT (f : Tensor Rat (2 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
reachable f = bigOr (mapList (\ x -> equalsVector (f x) [0.0]) sample[x][f])