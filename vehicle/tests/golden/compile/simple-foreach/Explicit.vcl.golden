vectorToVector : Vector Bool 0 -> Vector Bool 0;
vectorToVector xs = xs

mapVector : (Index 2 -> Bool) -> Vector (Index 2) 2 -> Vector Bool 2;
mapVector f = dfold {Index 2} {2} {Vector Bool} (\ {l} -> \ x -> \ xs -> f x :: xs) []

foreachVector : (Index 2 -> Bool) -> Vector Bool 2;
foreachVector f = mapVector f (indices 2)

type Tensor A ds = fold (\ d -> \ t -> Vector t d) A ds

vectorToList : Vector Nat 1 -> List Nat;
vectorToList = (\ {A} -> \ {B} -> \ f -> dfold (\ {m} -> f)) (\ x -> \ xs -> x :: xs) nil

@property;
index : forallT (f : Tensor Rat (2 :: nil) -> Tensor Rat (2 :: nil)) . Tensor Bool (2 :: nil);
index f = foreachVector (\ i -> f [0.0, 0.0] ! i >= 0.0)