vectorToVector : Vector Rat 0 -> Vector Rat 0;
vectorToVector xs = xs

mapVector : (Index 2 -> Rat) -> Vector (Index 2) 2 -> Vector Rat 2;
mapVector f = dfold {Index 2} {2} {Vector Rat} (\ {l} -> \ x -> \ xs -> f x :: xs) []

foreachVector : (Index 2 -> Rat) -> Vector Rat 2;
foreachVector f = mapVector f (indices 2)

type Tensor A ds = fold (\ d -> \ t -> Vector t d) A ds

vectorToList : Vector Nat 1 -> List Nat;
vectorToList = (\ {A} -> \ {B} -> \ f -> dfold (\ {m} -> f)) (\ x -> \ xs -> x :: xs) nil

@property;
index : forallT (f : Tensor Rat (2 :: nil) -> Tensor Rat (2 :: nil)) . Tensor Rat (2 :: nil);
index f = foreachVector (\ i -> max 0.0 (0.0 - f [0.0, 0.0] ! i))