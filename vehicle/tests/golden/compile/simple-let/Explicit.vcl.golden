bigAnd : List Bool -> Bool;
bigAnd _x0 = fold (\ x -> \ y -> x and y) True _x0

@property;
e1 : Bool;
e1 = let x = True in let y = False in x and y

@property;
e2 : Bool;
e2 = let y = 1 in y >= 2

@property;
forallLet : Bool;
forallLet = forall (x : Rat) . let y = x in y == 1.0

@property;
letForall : Bool;
letForall = let y = 1.0 in forall (x : Rat) . y == x

@property;
forallInLet : Bool;
forallInLet = bigAnd (map (\ x -> let y = x in y == 1) (1 :: nil))

@property;
letForallIn : Bool;
letForallIn = let y = 1 in bigAnd (map (\ x -> y == x) (1 :: nil))

falsey : Rat -> Bool;
falsey x = x <= 0.5

@property;
correctOutput : Bool;
correctOutput = let y = 0.0 in falsey y