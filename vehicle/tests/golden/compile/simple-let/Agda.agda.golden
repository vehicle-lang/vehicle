-- WARNING: This file was generated automatically by Vehicle
-- and should not be modified manually!
-- Metadata:
--  - Agda version: 2.6.2
--  - Vehicle version: 0.3.0+dev

{-# OPTIONS --allow-exec #-}

open import Vehicle
open import Data.Unit
open import Data.Empty
open import Data.Product
open import Data.Nat as ℕ using (ℕ)
open import Data.Integer as ℤ using (ℤ)
open import Data.Rational as ℚ using (ℚ)
open import Data.List.Base
open import Data.List.Relation.Unary.All as List
open import Relation.Binary.PropositionalEquality

module Agda where

postulate e1 : let x = ⊤ in let y = ⊥ in x × y

postulate e2 : let y = 1 in y ℕ.≥ 2

postulate forallLet : ∀ (x : ℕ) → let y = x in y ≡ 1

postulate letForall : let y = 1 in ∀ (x : ℕ) → y ≡ x

postulate forallInLet : List.All (λ x → let y = x in y ≡ 1) (1 ∷ [])

postulate letForallIn : let y = 1 in List.All (λ x → y ≡ x) (1 ∷ [])

Falsey : ℚ → Set
Falsey x = x ℚ.≤ ℤ.+ 1 ℚ./ 2

postulate correctOutput : let y = ℤ.+ 0 ℚ./ 1 in Falsey y