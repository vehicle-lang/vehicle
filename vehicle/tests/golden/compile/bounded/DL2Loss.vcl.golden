bigAnd : List Rat -> Rat;
bigAnd = fold (\ x -> \ y -> x + y) 0.0

vectorToVector : Vector Rat -> Vector Rat;
vectorToVector xs = xs

type Tensor A ds = fold (\ d -> \ t -> Vector t) A ds

vectorToList : Vector Nat -> List Nat;
vectorToList = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ xs -> x :: xs) nil

mapList : (Rat -> Rat) -> List Rat -> List Rat;
mapList f = fold (\ x -> \ xs -> f x :: xs) nil

@property;
bounded : forallT (f : Tensor Rat (1 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
bounded f = bigAnd (mapList (\ x -> max 0.0 ((max 0.0 (0.0 - x) + (if 0.0 == x then 1.0 else 0.0) + (max 0.0 (x - 1.0) + (if x == 1.0 then 1.0 else 0.0))) * (max 0.0 (0.0 - f [x] ! 0) + (if 0.0 == f [x] ! 0 then 1.0 else 0.0) + (max 0.0 (f [x] ! 0 - 1.0) + (if f [x] ! 0 == 1.0 then 1.0 else 0.0))))) sample[x][f])