bigAnd : (\ A -> Vector A) Bool -> Bool;
bigAnd _x0 = fold (\ x -> \ y -> x and y) True _x0

foreachVector__Rat : forallT n . (Index -> Rat) -> Vector Rat;
foreachVector__Rat n f = map f (indices n)

foreachVector__Bool : forallT n . (Index -> Bool) -> Vector Bool;
foreachVector__Bool n f = map f (indices n)

@noinline;
addVector : Vector Rat -> Vector Rat -> Vector Rat;
addVector _x0 _x1 = zipWith (\ x -> \ y -> x + y) _x0 _x1

@noinline;
subVector : Vector Rat -> Vector Rat -> Vector Rat;
subVector _x0 _x1 = zipWith (\ x -> \ y -> x - y) _x0 _x1

forallIndex : forallT n . (Index -> Bool) -> Bool;
forallIndex n f = bigAnd (foreachVector__Bool n (\ i -> f i))

type Tensor A ds = fold (\ d -> \ t -> Vector t) A ds

epsilon : Tensor Rat (5 :: nil);
epsilon = foreachVector__Rat 5 (\ i -> 0.1)

@property;
identity : forallT (encode : Tensor Rat (5 :: nil) -> Tensor Rat (2 :: nil)) . forallT (decode : Tensor Rat (2 :: nil) -> Tensor Rat (5 :: nil)) . Bool;
identity encode decode = forall x . forallIndex 5 (\ i -> subVector x epsilon ! i <= decode (encode x) ! i and decode (encode x) ! i <= addVector x epsilon ! i)