bigAnd : Vector Bool -> Bool;
bigAnd _x0 = fold (\ x -> \ y -> x and y) True _x0

@noinline;
addVector : Vector Rat -> Vector Rat -> Vector Rat;
addVector _x0 _x1 = zipWith (\ x -> \ y -> x + y) _x0 _x1

@noinline;
subVector : Vector Rat -> Vector Rat -> Vector Rat;
subVector _x0 _x1 = zipWith (\ x -> \ y -> x - y) _x0 _x1

epsilon : Vector Rat;
epsilon = map (\ i -> 0.1) (indices 5)

@property;
identity : forallT (encode : Vector Rat -> Vector Rat) . forallT (decode : Vector Rat -> Vector Rat) . Bool;
identity encode decode = forall x . bigAnd (map (\ i -> subVector x epsilon ! i <= decode (encode x) ! i and decode (encode x) ! i <= addVector x epsilon ! i) (indices 5))