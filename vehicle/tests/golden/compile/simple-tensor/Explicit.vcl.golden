bigAnd : (\ A -> Vector A) Bool -> Bool;
bigAnd = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ y -> x and y) True

vectorToVector : Vector Bool -> Vector Bool;
vectorToVector xs = xs

mapVector : (Index -> Bool) -> Vector (Index) -> Vector Bool;
mapVector f = dfold {Index} {Vector Bool} (\ x -> \ xs -> f x :: xs) []

foreachVector : forallT n . (Index -> Bool) -> Vector Bool;
foreachVector n f = mapVector f (indices n)

@noinline;
addVector : Vector Rat -> Vector Rat -> Vector Rat;
addVector = zipWith (\ x -> \ y -> x + y)

@noinline;
addVector : Vector (Vector Rat) -> Vector (Vector Rat) -> Vector (Vector Rat);
addVector = zipWith (\ x -> \ y -> addVector x y)

@noinline;
subVector : Vector Rat -> Vector Rat -> Vector Rat;
subVector = zipWith (\ x -> \ y -> x - y)

@noinline;
subVector : Vector (Vector Rat) -> Vector (Vector Rat) -> Vector (Vector Rat);
subVector = zipWith (\ x -> \ y -> subVector x y)

forallIndex : forallT n . (Index -> Bool) -> Bool;
forallIndex n f = bigAnd (foreachVector n (\ i -> f i))

type Tensor A ds = fold (\ d -> \ t -> Vector t) A ds

vectorToList : Vector Nat -> List Nat;
vectorToList = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ xs -> x :: xs) nil

zeroD : Tensor Rat nil;
zeroD = 2.5

oneD : Tensor Rat (2 :: nil);
oneD = [zeroD, 1.0]

twoD : Tensor Rat (2 :: 2 :: nil);
twoD = [oneD, [2.0, 3.0]]

lookup2D : Rat;
lookup2D = twoD ! 0 ! 1

addition : Tensor Rat (2 :: 2 :: nil);
addition = addVector twoD twoD

subtraction : Tensor Rat (2 :: 2 :: nil);
subtraction = subVector twoD twoD

@property;
p : forallT (f : Tensor Rat (2 :: 2 :: nil) -> Tensor Rat (2 :: 2 :: nil)) . Bool;
p f = forallIndex 2 (\ i -> forallIndex 2 (\ j -> addVector (f subtraction) addition ! i ! j >= 0.0))