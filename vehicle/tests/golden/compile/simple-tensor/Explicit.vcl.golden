bigAnd : Vector Bool -> Bool;
bigAnd _x0 = fold (\ x -> \ y -> x and y) True _x0

@noinline;
addVector__Rat__Rat__Rat : Vector Rat -> Vector Rat -> Vector Rat;
addVector__Rat__Rat__Rat _x0 _x1 = zipWith (\ x -> \ y -> x + y) _x0 _x1

@noinline;
addVector__Vector_Rat__Vector_Rat__Vector_Rat : Vector (Vector Rat) -> Vector (Vector Rat) -> Vector (Vector Rat);
addVector__Vector_Rat__Vector_Rat__Vector_Rat _x0 _x1 = zipWith (\ x -> \ y -> addVector__Rat__Rat__Rat x y) _x0 _x1

@noinline;
subVector__Rat__Rat__Rat : Vector Rat -> Vector Rat -> Vector Rat;
subVector__Rat__Rat__Rat _x0 _x1 = zipWith (\ x -> \ y -> x - y) _x0 _x1

@noinline;
subVector__Vector_Rat__Vector_Rat__Vector_Rat : Vector (Vector Rat) -> Vector (Vector Rat) -> Vector (Vector Rat);
subVector__Vector_Rat__Vector_Rat__Vector_Rat _x0 _x1 = zipWith (\ x -> \ y -> subVector__Rat__Rat__Rat x y) _x0 _x1

zeroD : Rat;
zeroD = 2.5

oneD : Vector Rat;
oneD = [zeroD, 1.0]

twoD : Vector (Vector Rat);
twoD = [oneD, [2.0, 3.0]]

addition : Vector (Vector Rat);
addition = addVector__Vector_Rat__Vector_Rat__Vector_Rat twoD twoD

subtraction : Vector (Vector Rat);
subtraction = subVector__Vector_Rat__Vector_Rat__Vector_Rat twoD twoD

@property;
p : forallT (f : Vector (Vector Rat) -> Vector (Vector Rat)) . Bool;
p f = bigAnd (map (\ i -> bigAnd (map (\ j -> addVector__Vector_Rat__Vector_Rat__Vector_Rat (f subtraction) addition ! i ! j >= 0.0) (indices 2))) (indices 2))