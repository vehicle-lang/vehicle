-- WARNING: This file was generated automatically by Vehicle
-- and should not be modified manually!
-- Metadata
--  - Agda version: 2.6.2
--  - AISEC version: 0.1.0
--  - Time generated: ???

{-# OPTIONS --allow-exec #-}

open import Vehicle
open import Data.Unit
open import Data.Integer as ℤ using (ℤ)
open import Data.List.Base
open import Data.List.Relation.Unary.All as List
open import Relation.Binary.PropositionalEquality

module simple-quantifierIn where

emptyList : List ℤ
emptyList = []

postulate empty : List.All (λ x → ⊤) emptyList

postulate double : List.All (λ x → List.All (λ y → x ≡ y) emptyList) emptyList

postulate forallForallIn : ∀ x → List.All (λ y → x ≡ y) emptyList

postulate forallInForall : List.All (λ x → ∀ y → x ≡ y) emptyList