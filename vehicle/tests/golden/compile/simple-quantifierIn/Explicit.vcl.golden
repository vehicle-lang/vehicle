bigAnd__lam_A__Vector_A : Vector Bool -> Bool;
bigAnd__lam_A__Vector_A _x0 = fold (\ x -> \ y -> x and y) True _x0

bigAnd__List : List Bool -> Bool;
bigAnd__List _x0 = fold (\ x -> \ y -> x and y) True _x0

bigOr : Vector Bool -> Bool;
bigOr _x0 = fold (\ x -> \ y -> x or y) False _x0

@noinline;
equalsVector : Vector Rat -> Vector Rat -> Bool;
equalsVector xs ys = bigAnd__lam_A__Vector_A (zipWith (\ x -> \ y -> x == y) xs ys)

@noinline;
notEqualsVector : Vector Rat -> Vector Rat -> Bool;
notEqualsVector xs ys = bigOr (zipWith (\ x -> \ y -> x != y) xs ys)

dataset : List (Vector Rat);
dataset = [0.5, 1.0] :: nil

@property;
empty : Bool;
empty = bigAnd__List (map (\ x -> True) dataset)

@property;
double : Bool;
double = bigAnd__List (map (\ x -> bigAnd__List (map (\ y -> equalsVector x y) dataset)) dataset)

@property;
forallForallIn : Bool;
forallForallIn = forall x . bigAnd__List (map (\ y -> equalsVector x y) dataset)

@property;
forallInForall : forallT (f : Vector Rat -> Vector Rat) . Bool;
forallInForall f = bigAnd__List (map (\ x -> forall y . notEqualsVector (f x) y) dataset)