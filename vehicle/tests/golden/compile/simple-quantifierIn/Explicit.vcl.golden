mapList : (Vector Rat 2 -> Bool) -> List (Vector Rat 2) -> List Bool;
mapList f _x0 = fold (\ x -> \ xs -> f x :: xs) nil _x0

bigAnd__lam_A__Vector_A_2 : (\ A -> Vector A 2) Bool -> Bool;
bigAnd__lam_A__Vector_A_2 _x0 = (\ {A} -> \ {B} -> \ f -> dfold (\ {m} -> f)) (\ x -> \ y -> x and y) True _x0

bigAnd__List : List Bool -> Bool;
bigAnd__List _x0 = fold (\ x -> \ y -> x and y) True _x0

<<<<<<< HEAD
bigOr : (\ A -> Vector A 1) Bool -> Bool;
bigOr _x0 = (\ {A} -> \ {B} -> \ f -> dfold (\ {m} -> f)) (\ x -> \ y -> x or y) False _x0

forallIn : (Vector Rat 2 -> Bool) -> List (Vector Rat 2) -> Bool;
forallIn f xs = bigAnd__List (mapList f xs)

mapVector__2__Index_2__Bool : (Index 2 -> Bool) -> Vector (Index 2) 2 -> Vector Bool 2;
mapVector__2__Index_2__Bool f _x0 = dfold {Index 2} {2} {Vector Bool} (\ {l} -> \ x -> \ xs -> f x :: xs) [] _x0

mapVector__1__Index_1__Bool : (Index 1 -> Bool) -> Vector (Index 1) 1 -> Vector Bool 1;
mapVector__1__Index_1__Bool f _x0 = dfold {Index 1} {1} {Vector Bool} (\ {l} -> \ x -> \ xs -> f x :: xs) [] _x0

foreachVector__Bool__1 : (Index 1 -> Bool) -> Vector Bool 1;
foreachVector__Bool__1 f = mapVector__1__Index_1__Bool f (indices 1)

foreachVector__Bool__2 : (Index 2 -> Bool) -> Vector Bool 2;
foreachVector__Bool__2 f = mapVector__2__Index_2__Bool f (indices 2)

zipWith__Rat__Rat__Bool : (Rat -> Rat -> Bool) -> Vector Rat 2 -> Vector Rat 2 -> Vector Bool 2;
zipWith__Rat__Rat__Bool f xs ys = foreachVector__Bool__2 (\ i -> f (xs ! i) (ys ! i))

zipWith__Rat__Rat__Bool : (Rat -> Rat -> Bool) -> Vector Rat 1 -> Vector Rat 1 -> Vector Bool 1;
zipWith__Rat__Rat__Bool f xs ys = foreachVector__Bool__1 (\ i -> f (xs ! i) (ys ! i))

@noinline;
equalsVector : Vector Rat 2 -> Vector Rat 2 -> Bool;
equalsVector xs ys = bigAnd__lam_A__Vector_A_2 (zipWith__Rat__Rat__Bool (\ x -> \ y -> x == y) xs ys)

notEqualsVector : Vector Rat 1 -> Vector Rat 1 -> Bool;
notEqualsVector xs ys = bigOr (zipWith__Rat__Rat__Bool (\ x -> \ y -> x != y) xs ys)
=======
bigOr : (\ A -> Vector A) Bool -> Bool;
bigOr = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ y -> x or y) False

forallIn : (Vector Rat -> Bool) -> List (Vector Rat) -> Bool;
forallIn f xs = bigAnd (mapList f xs)

vectorToVector : Vector Rat -> Vector Rat;
vectorToVector xs = xs

@noinline;
equalsVector : Vector Rat -> Vector Rat -> Bool;
equalsVector xs ys = bigAnd (zipWith (\ x -> \ y -> x == y) xs ys)

@noinline;
notEqualsVector : Vector Rat -> Vector Rat -> Bool;
notEqualsVector xs ys = bigOr (zipWith (\ x -> \ y -> x != y) xs ys)

vectorToList : Vector (Vector Rat) -> List (Vector Rat);
vectorToList = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ xs -> x :: xs) nil

mapList : forallT {A} . forallT {B} . (A -> B) -> List A -> List B;
mapList = \ {A} -> \ {B} -> \ f -> fold (\ x -> \ xs -> f x :: xs) nil
>>>>>>> size-irrelevancy

dataset : List (Vector Rat);
dataset = [0.5, 1.0] :: nil

@property;
empty : Bool;
empty = forallIn (\ x -> True) dataset

@property;
double : Bool;
double = forallIn (\ x -> forallIn (\ y -> equalsVector x y) dataset) dataset

@property;
forallForallIn : Bool;
forallForallIn = forall x . forallIn (\ y -> equalsVector x y) dataset

@property;
forallInForall : forallT (f : Vector Rat -> Vector Rat) . Bool;
forallInForall f = forallIn (\ x -> forall y . notEqualsVector (f x) y) dataset