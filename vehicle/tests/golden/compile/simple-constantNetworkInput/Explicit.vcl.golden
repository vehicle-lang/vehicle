bigAnd : (\ A -> Vector A 1) Bool -> Bool;
bigAnd _x0 = (\ {A} -> \ {B} -> \ f -> dfold (\ {m} -> f)) (\ x -> \ y -> x and y) True _x0

mapVector : (Index 1 -> Bool) -> Vector (Index 1) 1 -> Vector Bool 1;
mapVector f _x0 = dfold {Index 1} {1} {Vector Bool} (\ {l} -> \ x -> \ xs -> f x :: xs) [] _x0

foreachVector : (Index 1 -> Bool) -> Vector Bool 1;
foreachVector f = mapVector f (indices 1)

zipWith : (Rat -> Rat -> Bool) -> Vector Rat 1 -> Vector Rat 1 -> Vector Bool 1;
zipWith f xs ys = foreachVector (\ i -> f (xs ! i) (ys ! i))

@noinline;
equalsVector : Vector Rat 1 -> Vector Rat 1 -> Bool;
equalsVector xs ys = bigAnd (zipWith (\ x -> \ y -> x == y) xs ys)

@property;
p : forallT (f : Vector Rat 1 -> Vector Rat 1) . Bool;
p f = equalsVector (f [0.0]) [0.0]