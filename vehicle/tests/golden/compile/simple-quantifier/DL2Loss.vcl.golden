mapList__Int__Rat : (Int -> Rat) -> List Int -> List Rat;
mapList__Int__Rat f = fold (\ x -> \ xs -> f x :: xs) nil

mapList__Vector_Rat_1__Rat : (Vector Rat 1 -> Rat) -> List (Vector Rat 1) -> List Rat;
mapList__Vector_Rat_1__Rat f = fold (\ x -> \ xs -> f x :: xs) nil

bigAnd : List Rat -> Rat;
bigAnd = fold (\ x -> \ y -> x + y) 0.0

bigOr : List Rat -> Rat;
bigOr = fold (\ x -> \ y -> x * y) 1.0

unused : Rat;
unused = bigAnd (mapList__Int__Rat (\ (x : Int) -> 0.0) sample[x][])

@property;
expandedExpr : forallT (f : Vector Rat 1 -> Vector Rat 1) . Rat;
expandedExpr f = bigAnd (mapList__Vector_Rat_1__Rat (\ x -> max 0.0 (f x ! 0 - x ! 0)) sample[x][])

@property;
sequential : forallT (f : Vector Rat 1 -> Vector Rat 1) . Rat;
sequential f = bigAnd (mapList__Vector_Rat_1__Rat (\ x -> bigAnd (mapList__Vector_Rat_1__Rat (\ y -> max 0.0 (f y ! 0 - f x ! 0)) sample[y][x])) sample[x][])

@property;
parallel : forallT (f : Vector Rat 1 -> Vector Rat 1) . Rat;
parallel f = bigAnd (mapList__Vector_Rat_1__Rat (\ x -> max 0.0 (0.0 - f x ! 0)) sample[x][]) + bigOr (mapList__Vector_Rat_1__Rat (\ x -> max 0.0 (5.0 - f x ! 0)) sample[x][])