mapList : (Vector Rat 1 -> Rat) -> List (Vector Rat 1) -> List Rat;
mapList f _x0 = fold (\ x -> \ xs -> f x :: xs) nil _x0

bigAnd : List Rat -> Rat;
bigAnd _x0 = fold (\ x -> \ y -> x + y) 0.0 _x0

bigOr : List Rat -> Rat;
bigOr _x0 = fold (\ x -> \ y -> x * y) 1.0 _x0

@property;
expandedExpr : forallT (f : Vector Rat 1 -> Vector Rat 1) . Rat;
expandedExpr f = bigAnd (mapList (\ x -> max 0.0 (f x ! 0 - x ! 0)) sample[x][])

@property;
sequential : forallT (f : Vector Rat 1 -> Vector Rat 1) . Rat;
sequential f = bigAnd (mapList (\ x -> bigAnd (mapList (\ y -> max 0.0 (f y ! 0 - f x ! 0)) sample[y][x])) sample[x][])

@property;
parallel : forallT (f : Vector Rat 1 -> Vector Rat 1) . Rat;
parallel f = bigAnd (mapList (\ x -> max 0.0 (0.0 - f x ! 0)) sample[x][]) + bigOr (mapList (\ x -> max 0.0 (5.0 - f x ! 0)) sample[x][])