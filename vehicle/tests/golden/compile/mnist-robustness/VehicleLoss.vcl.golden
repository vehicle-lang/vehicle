bigAnd : (\ A -> Vector A) Rat -> Rat;
bigAnd _x0 = fold (\ x -> \ y -> max x y) -100000.0 _x0

foreachVector : forallT n . (Index -> Rat) -> Vector Rat;
foreachVector n f = map f (indices n)

@noinline;
subVector__Rat__Rat__Rat : Vector Rat -> Vector Rat -> Vector Rat;
subVector__Rat__Rat__Rat _x0 _x1 = zipWith (\ x -> \ y -> x - y) _x0 _x1

@noinline;
subVector__Vector_Rat__Vector_Rat__Vector_Rat : Vector (Vector Rat) -> Vector (Vector Rat) -> Vector (Vector Rat);
subVector__Vector_Rat__Vector_Rat__Vector_Rat _x0 _x1 = zipWith (\ x -> \ y -> subVector__Rat__Rat__Rat x y) _x0 _x1

forallIndex : forallT n . (Index -> Rat) -> Rat;
forallIndex n f = bigAnd (foreachVector n (\ i -> f i))

type Tensor A ds = fold (\ d -> \ t -> Vector t) A ds

type Image = Tensor Rat (28 :: 28 :: nil)

type Label = Index

validImage : Image -> Rat;
validImage x = forallIndex 28 (\ i -> forallIndex 28 (\ j -> max (0.0 - x ! i ! j) (x ! i ! j - 1.0)))

advises : forallT (classifier : Image -> Vector Rat) . Image -> Label -> Rat;
advises classifier x i = forallIndex 10 (\ j -> max (- (if j != i then -100000.0 else 100000.0)) (classifier x ! j - classifier x ! i))

boundedByEpsilon : forallT (epsilon : Rat) . Image -> Rat;
boundedByEpsilon epsilon x = forallIndex 28 (\ i -> forallIndex 28 (\ j -> max (- epsilon - x ! i ! j) (x ! i ! j - epsilon)))

robustAround : forallT (classifier : Image -> Vector Rat) . forallT (epsilon : Rat) . Image -> Label -> Rat;
robustAround classifier epsilon image label = Optimise[pertubation][min][label, image] max (\ pertubation -> let perturbedImage = subVector__Vector_Rat__Vector_Rat__Vector_Rat image pertubation in max (- max (boundedByEpsilon epsilon pertubation) (validImage perturbedImage)) (advises classifier perturbedImage label))

@property;
robust : forallT (n : Nat) . forallT (classifier : Image -> Vector Rat) . forallT (epsilon : Rat) . forallT (trainingImages : Vector Image) . forallT (trainingLabels : Vector Label) . Vector Rat;
robust n classifier epsilon trainingImages trainingLabels = foreachVector n (\ i -> robustAround classifier epsilon (trainingImages ! i) (trainingLabels ! i))