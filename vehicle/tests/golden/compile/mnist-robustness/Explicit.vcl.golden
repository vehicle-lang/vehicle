<<<<<<< HEAD
bigAnd__lam_A__Vector_A_10 : (\ A -> Vector A 10) Bool -> Bool;
bigAnd__lam_A__Vector_A_10 _x0 = (\ {A} -> \ {B} -> \ f -> dfold (\ {m} -> f)) (\ x -> \ y -> x and y) True _x0

bigAnd__lam_A__Vector_A_28 : (\ A -> Vector A 28) Bool -> Bool;
bigAnd__lam_A__Vector_A_28 _x0 = (\ {A} -> \ {B} -> \ f -> dfold (\ {m} -> f)) (\ x -> \ y -> x and y) True _x0

mapVector__n__Index_n__Bool : forallT (n : Nat) . (Index n -> Bool) -> Vector (Index n) n -> Vector Bool n;
mapVector__n__Index_n__Bool n f _x0 = dfold {Index n} {n} {Vector Bool} (\ {l} -> \ x -> \ xs -> f x :: xs) [] _x0

mapVector__10__Index_10__Bool : (Index 10 -> Bool) -> Vector (Index 10) 10 -> Vector Bool 10;
mapVector__10__Index_10__Bool f _x0 = dfold {Index 10} {10} {Vector Bool} (\ {l} -> \ x -> \ xs -> f x :: xs) [] _x0

mapVector__28__Index_28__Bool : (Index 28 -> Bool) -> Vector (Index 28) 28 -> Vector Bool 28;
mapVector__28__Index_28__Bool f _x0 = dfold {Index 28} {28} {Vector Bool} (\ {l} -> \ x -> \ xs -> f x :: xs) [] _x0

mapVector__28__Index_28__Rat : (Index 28 -> Rat) -> Vector (Index 28) 28 -> Vector Rat 28;
mapVector__28__Index_28__Rat f _x0 = dfold {Index 28} {28} {Vector Rat} (\ {l} -> \ x -> \ xs -> f x :: xs) [] _x0

mapVector__28__Index_28__Vector_Rat_28 : (Index 28 -> Vector Rat 28) -> Vector (Index 28) 28 -> Vector (Vector Rat 28) 28;
mapVector__28__Index_28__Vector_Rat_28 f _x0 = dfold {Index 28} {28} {Vector (Vector Rat 28)} (\ {l} -> \ x -> \ xs -> f x :: xs) [] _x0

foreachVector__Bool__10 : (Index 10 -> Bool) -> Vector Bool 10;
foreachVector__Bool__10 f = mapVector__10__Index_10__Bool f (indices 10)

foreachVector__Vector_Rat_28__28 : (Index 28 -> Vector Rat 28) -> Vector (Vector Rat 28) 28;
foreachVector__Vector_Rat_28__28 f = mapVector__28__Index_28__Vector_Rat_28 f (indices 28)

foreachVector__Bool__28 : (Index 28 -> Bool) -> Vector Bool 28;
foreachVector__Bool__28 f = mapVector__28__Index_28__Bool f (indices 28)

foreachVector__Bool__n : forallT (n : Nat) . (Index n -> Bool) -> Vector Bool n;
foreachVector__Bool__n n f = mapVector__n__Index_n__Bool n f (indices n)

foreachVector__Rat__28 : (Index 28 -> Rat) -> Vector Rat 28;
foreachVector__Rat__28 f = mapVector__28__Index_28__Rat f (indices 28)

zipWith__Vector_Rat_28__Vector_Rat_28__Vector_Rat_28 : (Vector Rat 28 -> Vector Rat 28 -> Vector Rat 28) -> Vector (Vector Rat 28) 28 -> Vector (Vector Rat 28) 28 -> Vector (Vector Rat 28) 28;
zipWith__Vector_Rat_28__Vector_Rat_28__Vector_Rat_28 f xs ys = foreachVector__Vector_Rat_28__28 (\ i -> f (xs ! i) (ys ! i))

zipWith__Rat__Rat__Rat : (Rat -> Rat -> Rat) -> Vector Rat 28 -> Vector Rat 28 -> Vector Rat 28;
zipWith__Rat__Rat__Rat f xs ys = foreachVector__Rat__28 (\ i -> f (xs ! i) (ys ! i))

@noinline;
subVector__Rat__Rat__Rat__28 : Vector Rat 28 -> Vector Rat 28 -> Vector Rat 28;
subVector__Rat__Rat__Rat__28 _x0 _x1 = zipWith__Rat__Rat__Rat (\ x -> \ y -> x - y) _x0 _x1

@noinline;
subVector__Vector_Rat_28__Vector_Rat_28__Vector_Rat_28__28 : Vector (Vector Rat 28) 28 -> Vector (Vector Rat 28) 28 -> Vector (Vector Rat 28) 28;
subVector__Vector_Rat_28__Vector_Rat_28__Vector_Rat_28__28 _x0 _x1 = zipWith__Vector_Rat_28__Vector_Rat_28__Vector_Rat_28 (\ x -> \ y -> subVector__Rat__Rat__Rat__28 x y) _x0 _x1

forallIndex__10 : (Index 10 -> Bool) -> Bool;
forallIndex__10 f = bigAnd__lam_A__Vector_A_10 (foreachVector__Bool__10 (\ i -> f i))

forallIndex__28 : (Index 28 -> Bool) -> Bool;
forallIndex__28 f = bigAnd__lam_A__Vector_A_28 (foreachVector__Bool__28 (\ i -> f i))
=======
bigAnd : (\ A -> Vector A) Bool -> Bool;
bigAnd = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ y -> x and y) True

vectorToVector : Vector Bool -> Vector Bool;
vectorToVector xs = xs

mapVector : (Index -> Bool) -> Vector (Index) -> Vector Bool;
mapVector f = dfold {Index} {Vector Bool} (\ x -> \ xs -> f x :: xs) []

foreachVector : forallT n . (Index -> Bool) -> Vector Bool;
foreachVector n f = mapVector f (indices n)

@noinline;
subVector : Vector Rat -> Vector Rat -> Vector Rat;
subVector = zipWith (\ x -> \ y -> x - y)

@noinline;
subVector : Vector (Vector Rat) -> Vector (Vector Rat) -> Vector (Vector Rat);
subVector = zipWith (\ x -> \ y -> subVector x y)

forallIndex : forallT n . (Index -> Bool) -> Bool;
forallIndex n f = bigAnd (foreachVector n (\ i -> f i))
>>>>>>> size-irrelevancy

type Tensor A ds = fold (\ d -> \ t -> Vector t) A ds

<<<<<<< HEAD
=======
vectorToList : Vector Nat -> List Nat;
vectorToList = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ xs -> x :: xs) nil

>>>>>>> size-irrelevancy
type Image = Tensor Rat (28 :: 28 :: nil)

type Label = Index

validImage : Image -> Bool;
<<<<<<< HEAD
validImage x = forallIndex__28 (\ i -> forallIndex__28 (\ j -> 0.0 <= x ! i ! j and x ! i ! j <= 1.0))

advises : forallT (classifier : Image -> Vector Rat 10) . Image -> Label -> Bool;
advises classifier x i = forallIndex__10 (\ j -> j != i => classifier x ! i > classifier x ! j)

boundedByEpsilon : forallT (epsilon : Rat) . Image -> Bool;
boundedByEpsilon epsilon x = forallIndex__28 (\ i -> forallIndex__28 (\ j -> - epsilon <= x ! i ! j and x ! i ! j <= epsilon))

robustAround : forallT (classifier : Image -> Vector Rat 10) . forallT (epsilon : Rat) . Image -> Label -> Bool;
robustAround classifier epsilon image label = forall pertubation . let perturbedImage = subVector__Vector_Rat_28__Vector_Rat_28__Vector_Rat_28__28 image pertubation in boundedByEpsilon epsilon pertubation and validImage perturbedImage => advises classifier perturbedImage label

@property;
robust : forallT (n : Nat) . forallT (classifier : Image -> Vector Rat 10) . forallT (epsilon : Rat) . forallT (trainingImages : forallT (n : Nat) . Vector Image n) . forallT (trainingLabels : forallT (n : Nat) . Vector Label n) . Vector Bool n;
robust n classifier epsilon trainingImages trainingLabels = foreachVector__Bool__n n (\ i -> robustAround classifier epsilon (trainingImages n ! i) (trainingLabels n ! i))
=======
validImage x = forallIndex 28 (\ i -> forallIndex 28 (\ j -> 0.0 <= x ! i ! j and x ! i ! j <= 1.0))

advises : forallT (classifier : Image -> Vector Rat) . Image -> Label -> Bool;
advises classifier x i = forallIndex 10 (\ j -> j != i => classifier x ! i > classifier x ! j)

boundedByEpsilon : forallT (epsilon : Rat) . Image -> Bool;
boundedByEpsilon epsilon x = forallIndex 28 (\ i -> forallIndex 28 (\ j -> - epsilon <= x ! i ! j and x ! i ! j <= epsilon))

robustAround : forallT (classifier : Image -> Vector Rat) . forallT (epsilon : Rat) . Image -> Label -> Bool;
robustAround classifier epsilon image label = forall pertubation . let perturbedImage = subVector image pertubation in boundedByEpsilon epsilon pertubation and validImage perturbedImage => advises classifier perturbedImage label

@property;
robust : forallT (classifier : Image -> Vector Rat) . forallT (epsilon : Rat) . forallT (n : Nat) . forallT (trainingImages : Vector Image) . forallT (trainingLabels : Vector Label) . Vector Bool;
robust classifier epsilon n trainingImages trainingLabels = foreachVector n (\ i -> robustAround classifier epsilon (trainingImages ! i) (trainingLabels ! i))
>>>>>>> size-irrelevancy
