bigAnd : Vector Bool -> Bool;
bigAnd _x0 = fold (\ x -> \ y -> x and y) True _x0

subVector__Rat__Rat__Rat : Vector Rat -> Vector Rat -> Vector Rat;
subVector__Rat__Rat__Rat _x0 _x1 = zipWith (\ x -> \ y -> x - y) _x0 _x1

subVector__Vector_Rat__Vector_Rat__Vector_Rat : Vector (Vector Rat) -> Vector (Vector Rat) -> Vector (Vector Rat);
subVector__Vector_Rat__Vector_Rat__Vector_Rat _x0 _x1 = zipWith (\ x -> \ y -> subVector__Rat__Rat__Rat x y) _x0 _x1

validImage : Vector (Vector Rat) -> Bool;
validImage x = bigAnd (map (\ i -> bigAnd (map (\ j -> 0.0 <= x ! i ! j and x ! i ! j <= 1.0) (indices 28))) (indices 28))

advises : forallT (classifier : Vector (Vector Rat) -> Vector Rat) . Vector (Vector Rat) -> Index -> Bool;
advises classifier x i = bigAnd (map (\ j -> j != i => classifier x ! i > classifier x ! j) (indices 10))

boundedByEpsilon : forallT (epsilon : Rat) . Vector (Vector Rat) -> Bool;
boundedByEpsilon epsilon x = bigAnd (map (\ i -> bigAnd (map (\ j -> - epsilon <= x ! i ! j and x ! i ! j <= epsilon) (indices 28))) (indices 28))

robustAround : forallT (classifier : Vector (Vector Rat) -> Vector Rat) . forallT (epsilon : Rat) . Vector (Vector Rat) -> Index -> Bool;
robustAround classifier epsilon image label = forall perturbation . let perturbedImage = subVector__Vector_Rat__Vector_Rat__Vector_Rat image perturbation in boundedByEpsilon epsilon perturbation and validImage perturbedImage => advises classifier perturbedImage label

@property;
robust : forallT (n : Nat) . forallT (classifier : Vector (Vector Rat) -> Vector Rat) . forallT (epsilon : Rat) . forallT (trainingImages : Vector (Vector (Vector Rat))) . forallT (trainingLabels : Vector (Index)) . Vector Bool;
robust n classifier epsilon trainingImages trainingLabels = map (\ i -> robustAround classifier epsilon (trainingImages ! i) (trainingLabels ! i)) (indices n)