bigOr : List Rat -> Rat;
bigOr = fold (\ x -> \ y -> x * y) 1.0

vectorToVector : Vector Rat -> Vector Rat;
vectorToVector xs = xs

type Tensor A ds = fold (\ d -> \ t -> Vector t) A ds

vectorToList : Vector Nat -> List Nat;
vectorToList = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ xs -> x :: xs) nil

mapList : (Rat -> Rat) -> List Rat -> List Rat;
mapList f = fold (\ x -> \ xs -> f x :: xs) nil

@property;
unusedVar : forallT (f : Tensor Rat (1 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
unusedVar f = bigOr (mapList (\ x -> bigOr (mapList (\ (y : Rat) -> max 0.0 (0.0 - f [x] ! 0)) sample[y][x, f])) sample[x][f])

@property;
underConstrainedVar1 : forallT (f : Tensor Rat (1 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
underConstrainedVar1 f = bigOr (mapList (\ x -> bigOr (mapList (\ y -> max 0.0 (1.0 - x) + (max 0.0 (2.0 - y) + max 0.0 (0.0 - f [x + y] ! 0))) sample[y][x, f])) sample[x][f])

@property;
underConstrainedVar2 : forallT (f : Tensor Rat (1 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
underConstrainedVar2 f = bigOr (mapList (\ x -> bigOr (mapList (\ y -> max 0.0 (1.0 - x) + (max 0.0 (2.0 - 2.0 * y) + max 0.0 (0.0 - f [2.0 * x + y] ! 0))) sample[y][x, f])) sample[x][f])

@property;
underConstrainedVars : forallT (f : Tensor Rat (1 :: nil) -> Tensor Rat (1 :: nil)) . Rat;
underConstrainedVars f = bigOr (mapList (\ (x : Tensor Rat (4 :: nil)) -> max 0.0 (2.0 - x ! 3) + (max 0.0 (1.0 - (x ! 2 + x ! 3)) + (max 0.0 (2.5 - (x ! 1 + x ! 0)) + max 0.0 (2.0 - f [x ! 0 + x ! 1] ! 0)))) sample[x][f])