bigAnd__lam_A__Vector_A : Vector Bool -> Bool;
bigAnd__lam_A__Vector_A _x0 = fold (\ x -> \ y -> x and y) True _x0

bigAnd__List : List Bool -> Bool;
bigAnd__List _x0 = fold (\ x -> \ y -> x and y) True _x0

bigOr : Vector Bool -> Bool;
bigOr _x0 = fold (\ x -> \ y -> x or y) False _x0

greatDane : Index;
greatDane = 1

germanShepherd : Index;
germanShepherd = 2

chihuahua : Index;
chihuahua = 4

pekinese : Index;
pekinese = 5

smallDogs : List (Index);
smallDogs = chihuahua :: pekinese :: nil

bigDogs : List (Index);
bigDogs = greatDane :: germanShepherd :: nil

validPixel : Rat -> Bool;
validPixel p = 0.0 <= p and p <= 1.0

validImage : Vector (Vector Rat) -> Bool;
validImage x = bigAnd__lam_A__Vector_A (map (\ i -> bigAnd__lam_A__Vector_A (map (\ j -> validPixel (x ! i ! j)) (indices 4))) (indices 4))

isFirstChoice : forallT (score : Vector (Vector Rat) -> Vector Rat) . Vector (Vector Rat) -> Index -> Bool;
isFirstChoice score x dog1 = let scores = score x in bigAnd__lam_A__Vector_A (map (\ d -> d != dog1 => scores ! dog1 > scores ! d) (indices 6))

isSecondChoice : forallT (score : Vector (Vector Rat) -> Vector Rat) . Vector (Vector Rat) -> Index -> Bool;
isSecondChoice score x dog2 = let scores = score x in bigOr (map (\ dog1 -> isFirstChoice score x dog1 and bigAnd__lam_A__Vector_A (map (\ d -> d != dog1 and d != dog2 => scores ! dog2 > scores ! d) (indices 6))) (indices 6))

noConfusionWith : forallT (score : Vector (Vector Rat) -> Vector Rat) . Vector (Vector Rat) -> List (Index) -> List (Index) -> Bool;
noConfusionWith score x dogs1 dogs2 = bigAnd__List (map (\ dog1 -> bigAnd__List (map (\ dog2 -> not (isFirstChoice score x dog1 and isSecondChoice score x dog2)) dogs2)) dogs1)

@property;
doesNotConfuseBigAndSmall : forallT (score : Vector (Vector Rat) -> Vector Rat) . Bool;
doesNotConfuseBigAndSmall score = forall x . validImage x => noConfusionWith score x bigDogs smallDogs