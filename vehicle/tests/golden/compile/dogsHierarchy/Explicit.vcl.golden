bigAnd : List Bool -> Bool;
bigAnd = fold (\ x -> \ y -> x and y) True

bigOr : (\ A -> Vector A) Bool -> Bool;
bigOr = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ y -> x or y) False

forallIn : (Index -> Bool) -> List (Index) -> Bool;
forallIn f xs = bigAnd (mapList f xs)

vectorToVector : Vector Bool -> Vector Bool;
vectorToVector xs = xs

mapVector : (Index -> Bool) -> Vector (Index) -> Vector Bool;
mapVector f = dfold {Index} {Vector Bool} (\ x -> \ xs -> f x :: xs) []

foreachVector : forallT n . (Index -> Bool) -> Vector Bool;
foreachVector n f = mapVector f (indices n)

existsIndex : forallT n . (Index -> Bool) -> Bool;
existsIndex n f = bigOr (foreachVector n (\ i -> f i))

forallIndex : forallT n . (Index -> Bool) -> Bool;
forallIndex n f = bigAnd (foreachVector n (\ i -> f i))

type Tensor A ds = fold (\ d -> \ t -> Vector t) A ds

vectorToList : Vector (Index) -> List (Index);
vectorToList = (\ {A} -> \ {B} -> \ f -> dfold f) (\ x -> \ xs -> x :: xs) nil

mapList : forallT {A} . forallT {B} . (A -> B) -> List A -> List B;
mapList = \ {A} -> \ {B} -> \ f -> fold (\ x -> \ xs -> f x :: xs) nil

numberOfDogs : forallT {_x0} . {{HasNatLiterals _x0 }} -> _x0;
numberOfDogs {_x0} {{_ }} = _ 6

type Dog = Index

unknownDog : forallT {_x0} . {{HasNatLiterals _x0 }} -> _x0;
unknownDog {_x0} {{_ }} = _ 0

greatDane : Index;
greatDane = 1

germanShepherd : Index;
germanShepherd = 2

chihuahua : Index;
chihuahua = 4

pekinese : Index;
pekinese = 5

smallDogs : List Dog;
smallDogs = chihuahua :: pekinese :: nil

bigDogs : List Dog;
bigDogs = greatDane :: germanShepherd :: nil

type Image = Tensor Rat (4 :: 4 :: nil)

type Score = Rat

validPixel : Rat -> Bool;
validPixel p = 0.0 <= p and p <= 1.0

validImage : Image -> Bool;
validImage x = forallIndex 4 (\ i -> forallIndex 4 (\ j -> validPixel (x ! i ! j)))

isFirstChoice : forallT (score : Image -> Vector Score) . Image -> Dog -> Bool;
isFirstChoice score x dog1 = let scores = score x in forallIndex 6 (\ d -> d != dog1 => scores ! dog1 > scores ! d)

isSecondChoice : forallT (score : Image -> Vector Score) . Image -> Dog -> Bool;
isSecondChoice score x dog2 = let scores = score x in existsIndex 6 (\ dog1 -> isFirstChoice score x dog1 and forallIndex 6 (\ d -> d != dog1 and d != dog2 => scores ! dog2 > scores ! d))

noConfusionWith : forallT (score : Image -> Vector Score) . Image -> List Dog -> List Dog -> Bool;
noConfusionWith score x dogs1 dogs2 = forallIn (\ dog1 -> forallIn (\ dog2 -> not (isFirstChoice score x dog1 and isSecondChoice score x dog2)) dogs2) dogs1

@property;
doesNotConfuseBigAndSmall : forallT (score : Image -> Vector Score) . Bool;
doesNotConfuseBigAndSmall score = forall x . validImage x => noConfusionWith score x bigDogs smallDogs