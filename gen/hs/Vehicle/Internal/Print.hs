-- File generated by the BNF Converter (bnfc 2.9.3).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for Vehicle.

module Vehicle.Internal.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Vehicle.Internal.Abs
import qualified Data.Text

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Vehicle.Internal.Abs.BuiltinToken where
  prt _ (Vehicle.Internal.Abs.BuiltinToken (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.Internal.Abs.NameToken where
  prt _ (Vehicle.Internal.Abs.NameToken (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.Internal.Abs.BoolToken where
  prt _ (Vehicle.Internal.Abs.BoolToken (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.Internal.Abs.HoleToken where
  prt _ (Vehicle.Internal.Abs.HoleToken (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.Internal.Abs.TypeToken where
  prt _ (Vehicle.Internal.Abs.TypeToken (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.Internal.Abs.Natural where
  prt _ (Vehicle.Internal.Abs.Natural (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.Internal.Abs.Rational where
  prt _ (Vehicle.Internal.Abs.Rational (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.Internal.Abs.Binder where
  prt i = \case
    Vehicle.Internal.Abs.RelevantExplicitBinder nametoken expr -> prPrec i 0 (concatD [doc (showString "("), prt 0 nametoken, doc (showString ":"), prt 0 expr, doc (showString ")")])
    Vehicle.Internal.Abs.RelevantImplicitBinder nametoken expr -> prPrec i 0 (concatD [doc (showString "{"), prt 0 nametoken, doc (showString ":"), prt 0 expr, doc (showString "}")])
    Vehicle.Internal.Abs.RelevantInstanceBinder nametoken expr -> prPrec i 0 (concatD [doc (showString "{{"), prt 0 nametoken, doc (showString ":"), prt 0 expr, doc (showString "}}")])
    Vehicle.Internal.Abs.IrrelevantExplicitBinder nametoken expr -> prPrec i 0 (concatD [doc (showString ".("), prt 0 nametoken, doc (showString ":"), prt 0 expr, doc (showString ")")])
    Vehicle.Internal.Abs.IrrelevantImplicitBinder nametoken expr -> prPrec i 0 (concatD [doc (showString ".{"), prt 0 nametoken, doc (showString ":"), prt 0 expr, doc (showString "}")])
    Vehicle.Internal.Abs.IrrelevantInstanceBinder nametoken expr -> prPrec i 0 (concatD [doc (showString ".{{"), prt 0 nametoken, doc (showString ":"), prt 0 expr, doc (showString "}}")])

instance Print Vehicle.Internal.Abs.Arg where
  prt i = \case
    Vehicle.Internal.Abs.RelevantExplicitArg expr -> prPrec i 0 (concatD [prt 1 expr])
    Vehicle.Internal.Abs.RelevantImplicitArg expr -> prPrec i 0 (concatD [doc (showString "{"), prt 0 expr, doc (showString "}")])
    Vehicle.Internal.Abs.RelevantInstanceArg expr -> prPrec i 0 (concatD [doc (showString "{{"), prt 0 expr, doc (showString "}}")])
    Vehicle.Internal.Abs.IrrelevantExplicitArg expr -> prPrec i 0 (concatD [doc (showString ".("), prt 0 expr, doc (showString ")")])
    Vehicle.Internal.Abs.IrrelevantImplicitArg expr -> prPrec i 0 (concatD [doc (showString ".{"), prt 0 expr, doc (showString "}")])
    Vehicle.Internal.Abs.IrrelevantInstanceArg expr -> prPrec i 0 (concatD [doc (showString ".{{"), prt 0 expr, doc (showString "}}")])

instance Print Vehicle.Internal.Abs.Lit where
  prt i = \case
    Vehicle.Internal.Abs.UnitLiteral -> prPrec i 0 (concatD [doc (showString "()")])
    Vehicle.Internal.Abs.NatLiteral natural -> prPrec i 0 (concatD [prt 0 natural])
    Vehicle.Internal.Abs.RatLiteral rational -> prPrec i 0 (concatD [prt 0 rational])
    Vehicle.Internal.Abs.BoolLiteral booltoken -> prPrec i 0 (concatD [prt 0 booltoken])

instance Print Vehicle.Internal.Abs.Expr where
  prt i = \case
    Vehicle.Internal.Abs.Ann expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString ":"), prt 1 expr2])
    Vehicle.Internal.Abs.Pi binder expr -> prPrec i 0 (concatD [doc (showString "pi"), prt 0 binder, prt 1 expr])
    Vehicle.Internal.Abs.Let binder expr1 expr2 -> prPrec i 0 (concatD [doc (showString "let"), prt 0 binder, prt 1 expr1, prt 1 expr2])
    Vehicle.Internal.Abs.Lam binder expr -> prPrec i 0 (concatD [doc (showString "lambda"), prt 0 binder, prt 1 expr])
    Vehicle.Internal.Abs.App expr arg -> prPrec i 0 (concatD [prt 1 expr, prt 0 arg])
    Vehicle.Internal.Abs.Type typetoken -> prPrec i 1 (concatD [prt 0 typetoken])
    Vehicle.Internal.Abs.Builtin builtintoken -> prPrec i 1 (concatD [prt 0 builtintoken])
    Vehicle.Internal.Abs.Var nametoken -> prPrec i 1 (concatD [prt 0 nametoken])
    Vehicle.Internal.Abs.Literal lit -> prPrec i 1 (concatD [prt 0 lit])
    Vehicle.Internal.Abs.LVec exprs -> prPrec i 1 (concatD [doc (showString "["), prt 1 exprs, doc (showString "]")])
    Vehicle.Internal.Abs.Hole holetoken -> prPrec i 1 (concatD [prt 0 holetoken])

instance Print [Vehicle.Internal.Abs.Expr] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 1 x]
  prt _ (x:xs) = concatD [prt 1 x, doc (showString ","), prt 1 xs]

instance Print Vehicle.Internal.Abs.Decl where
  prt i = \case
    Vehicle.Internal.Abs.DeclNetw nametoken expr -> prPrec i 0 (concatD [doc (showString "("), doc (showString "declare-network"), prt 0 nametoken, prt 1 expr, doc (showString ")")])
    Vehicle.Internal.Abs.DeclData nametoken expr -> prPrec i 0 (concatD [doc (showString "("), doc (showString "declare-dataset"), prt 0 nametoken, prt 1 expr, doc (showString ")")])
    Vehicle.Internal.Abs.DeclParam nametoken expr -> prPrec i 0 (concatD [doc (showString "("), doc (showString "declare-parameter"), prt 0 nametoken, prt 1 expr, doc (showString ")")])
    Vehicle.Internal.Abs.DeclImplParam nametoken expr -> prPrec i 0 (concatD [doc (showString "("), doc (showString "declare-impl-parameter"), prt 0 nametoken, prt 1 expr, doc (showString ")")])
    Vehicle.Internal.Abs.DeclPost nametoken expr -> prPrec i 0 (concatD [doc (showString "("), doc (showString "declare-postulate"), prt 0 nametoken, prt 1 expr, doc (showString ")")])
    Vehicle.Internal.Abs.DefFun nametoken expr1 expr2 -> prPrec i 0 (concatD [doc (showString "("), doc (showString "define-fun"), prt 0 nametoken, prt 1 expr1, prt 1 expr2, doc (showString ")")])

instance Print [Vehicle.Internal.Abs.Decl] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Vehicle.Internal.Abs.Prog where
  prt i = \case
    Vehicle.Internal.Abs.Main decls -> prPrec i 0 (concatD [doc (showString "("), prt 0 decls, doc (showString ")")])
