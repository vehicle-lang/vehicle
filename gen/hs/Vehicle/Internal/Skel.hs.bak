-- File generated by the BNF Converter (bnfc 2.9.3).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Vehicle.Internal.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Vehicle.Internal.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transBuiltinToken :: Vehicle.Internal.Abs.BuiltinToken -> Result
transBuiltinToken x = case x of
  Vehicle.Internal.Abs.BuiltinToken string -> failure x

transNameToken :: Vehicle.Internal.Abs.NameToken -> Result
transNameToken x = case x of
  Vehicle.Internal.Abs.NameToken string -> failure x

transBoolToken :: Vehicle.Internal.Abs.BoolToken -> Result
transBoolToken x = case x of
  Vehicle.Internal.Abs.BoolToken string -> failure x

transHoleToken :: Vehicle.Internal.Abs.HoleToken -> Result
transHoleToken x = case x of
  Vehicle.Internal.Abs.HoleToken string -> failure x

transTypeToken :: Vehicle.Internal.Abs.TypeToken -> Result
transTypeToken x = case x of
  Vehicle.Internal.Abs.TypeToken string -> failure x

transNatural :: Vehicle.Internal.Abs.Natural -> Result
transNatural x = case x of
  Vehicle.Internal.Abs.Natural string -> failure x

transRational :: Vehicle.Internal.Abs.Rational -> Result
transRational x = case x of
  Vehicle.Internal.Abs.Rational string -> failure x

transBinder :: Vehicle.Internal.Abs.Binder -> Result
transBinder x = case x of
  Vehicle.Internal.Abs.ExplicitBinder nametoken expr -> failure x
  Vehicle.Internal.Abs.ImplicitBinder nametoken expr -> failure x
  Vehicle.Internal.Abs.InstanceBinder nametoken expr -> failure x

transArg :: Vehicle.Internal.Abs.Arg -> Result
transArg x = case x of
  Vehicle.Internal.Abs.ExplicitArg expr -> failure x
  Vehicle.Internal.Abs.ImplicitArg expr -> failure x
  Vehicle.Internal.Abs.InstanceArg expr -> failure x

transLit :: Vehicle.Internal.Abs.Lit -> Result
transLit x = case x of
  Vehicle.Internal.Abs.LitNat natural -> failure x
  Vehicle.Internal.Abs.LitRat rational -> failure x
  Vehicle.Internal.Abs.LitBool booltoken -> failure x

transExpr :: Vehicle.Internal.Abs.Expr -> Result
transExpr x = case x of
  Vehicle.Internal.Abs.Ann expr1 expr2 -> failure x
  Vehicle.Internal.Abs.Pi binder expr -> failure x
  Vehicle.Internal.Abs.Let binder expr1 expr2 -> failure x
  Vehicle.Internal.Abs.Lam binder expr -> failure x
  Vehicle.Internal.Abs.App expr arg -> failure x
  Vehicle.Internal.Abs.Type typetoken -> failure x
  Vehicle.Internal.Abs.Builtin builtintoken -> failure x
  Vehicle.Internal.Abs.Var nametoken -> failure x
  Vehicle.Internal.Abs.Literal lit -> failure x
  Vehicle.Internal.Abs.LSeq exprs -> failure x
  Vehicle.Internal.Abs.Hole holetoken -> failure x

transDecl :: Vehicle.Internal.Abs.Decl -> Result
transDecl x = case x of
  Vehicle.Internal.Abs.DeclNetw nametoken expr -> failure x
  Vehicle.Internal.Abs.DeclData nametoken expr -> failure x
  Vehicle.Internal.Abs.DeclParam nametoken expr -> failure x
  Vehicle.Internal.Abs.DefFun nametoken expr1 expr2 -> failure x

transProg :: Vehicle.Internal.Abs.Prog -> Result
transProg x = case x of
  Vehicle.Internal.Abs.Main decls -> failure x
