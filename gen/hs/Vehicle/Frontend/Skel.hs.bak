-- File generated by the BNF Converter (bnfc 2.9.3).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Vehicle.Frontend.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Vehicle.Frontend.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transTokArrow :: Vehicle.Frontend.Abs.TokArrow -> Result
transTokArrow x = case x of
  Vehicle.Frontend.Abs.TokArrow string -> failure x

transTokForall :: Vehicle.Frontend.Abs.TokForall -> Result
transTokForall x = case x of
  Vehicle.Frontend.Abs.TokForall string -> failure x

transTokIf :: Vehicle.Frontend.Abs.TokIf -> Result
transTokIf x = case x of
  Vehicle.Frontend.Abs.TokIf string -> failure x

transTokThen :: Vehicle.Frontend.Abs.TokThen -> Result
transTokThen x = case x of
  Vehicle.Frontend.Abs.TokThen string -> failure x

transTokElse :: Vehicle.Frontend.Abs.TokElse -> Result
transTokElse x = case x of
  Vehicle.Frontend.Abs.TokElse string -> failure x

transTokDot :: Vehicle.Frontend.Abs.TokDot -> Result
transTokDot x = case x of
  Vehicle.Frontend.Abs.TokDot string -> failure x

transTokElemOf :: Vehicle.Frontend.Abs.TokElemOf -> Result
transTokElemOf x = case x of
  Vehicle.Frontend.Abs.TokElemOf string -> failure x

transTokLambda :: Vehicle.Frontend.Abs.TokLambda -> Result
transTokLambda x = case x of
  Vehicle.Frontend.Abs.TokLambda string -> failure x

transTokTensor :: Vehicle.Frontend.Abs.TokTensor -> Result
transTokTensor x = case x of
  Vehicle.Frontend.Abs.TokTensor string -> failure x

transTokList :: Vehicle.Frontend.Abs.TokList -> Result
transTokList x = case x of
  Vehicle.Frontend.Abs.TokList string -> failure x

transTokReal :: Vehicle.Frontend.Abs.TokReal -> Result
transTokReal x = case x of
  Vehicle.Frontend.Abs.TokReal string -> failure x

transTokRat :: Vehicle.Frontend.Abs.TokRat -> Result
transTokRat x = case x of
  Vehicle.Frontend.Abs.TokRat string -> failure x

transTokInt :: Vehicle.Frontend.Abs.TokInt -> Result
transTokInt x = case x of
  Vehicle.Frontend.Abs.TokInt string -> failure x

transTokNat :: Vehicle.Frontend.Abs.TokNat -> Result
transTokNat x = case x of
  Vehicle.Frontend.Abs.TokNat string -> failure x

transTokBool :: Vehicle.Frontend.Abs.TokBool -> Result
transTokBool x = case x of
  Vehicle.Frontend.Abs.TokBool string -> failure x

transTokProp :: Vehicle.Frontend.Abs.TokProp -> Result
transTokProp x = case x of
  Vehicle.Frontend.Abs.TokProp string -> failure x

transTokEvery :: Vehicle.Frontend.Abs.TokEvery -> Result
transTokEvery x = case x of
  Vehicle.Frontend.Abs.TokEvery string -> failure x

transTokSome :: Vehicle.Frontend.Abs.TokSome -> Result
transTokSome x = case x of
  Vehicle.Frontend.Abs.TokSome string -> failure x

transTokImpl :: Vehicle.Frontend.Abs.TokImpl -> Result
transTokImpl x = case x of
  Vehicle.Frontend.Abs.TokImpl string -> failure x

transTokAnd :: Vehicle.Frontend.Abs.TokAnd -> Result
transTokAnd x = case x of
  Vehicle.Frontend.Abs.TokAnd string -> failure x

transTokOr :: Vehicle.Frontend.Abs.TokOr -> Result
transTokOr x = case x of
  Vehicle.Frontend.Abs.TokOr string -> failure x

transTokNot :: Vehicle.Frontend.Abs.TokNot -> Result
transTokNot x = case x of
  Vehicle.Frontend.Abs.TokNot string -> failure x

transTokEq :: Vehicle.Frontend.Abs.TokEq -> Result
transTokEq x = case x of
  Vehicle.Frontend.Abs.TokEq string -> failure x

transTokNeq :: Vehicle.Frontend.Abs.TokNeq -> Result
transTokNeq x = case x of
  Vehicle.Frontend.Abs.TokNeq string -> failure x

transTokLe :: Vehicle.Frontend.Abs.TokLe -> Result
transTokLe x = case x of
  Vehicle.Frontend.Abs.TokLe string -> failure x

transTokLt :: Vehicle.Frontend.Abs.TokLt -> Result
transTokLt x = case x of
  Vehicle.Frontend.Abs.TokLt string -> failure x

transTokGe :: Vehicle.Frontend.Abs.TokGe -> Result
transTokGe x = case x of
  Vehicle.Frontend.Abs.TokGe string -> failure x

transTokGt :: Vehicle.Frontend.Abs.TokGt -> Result
transTokGt x = case x of
  Vehicle.Frontend.Abs.TokGt string -> failure x

transTokMul :: Vehicle.Frontend.Abs.TokMul -> Result
transTokMul x = case x of
  Vehicle.Frontend.Abs.TokMul string -> failure x

transTokDiv :: Vehicle.Frontend.Abs.TokDiv -> Result
transTokDiv x = case x of
  Vehicle.Frontend.Abs.TokDiv string -> failure x

transTokAdd :: Vehicle.Frontend.Abs.TokAdd -> Result
transTokAdd x = case x of
  Vehicle.Frontend.Abs.TokAdd string -> failure x

transTokSub :: Vehicle.Frontend.Abs.TokSub -> Result
transTokSub x = case x of
  Vehicle.Frontend.Abs.TokSub string -> failure x

transTokSeqOpen :: Vehicle.Frontend.Abs.TokSeqOpen -> Result
transTokSeqOpen x = case x of
  Vehicle.Frontend.Abs.TokSeqOpen string -> failure x

transTokSeqClose :: Vehicle.Frontend.Abs.TokSeqClose -> Result
transTokSeqClose x = case x of
  Vehicle.Frontend.Abs.TokSeqClose string -> failure x

transTokCons :: Vehicle.Frontend.Abs.TokCons -> Result
transTokCons x = case x of
  Vehicle.Frontend.Abs.TokCons string -> failure x

transTokAt :: Vehicle.Frontend.Abs.TokAt -> Result
transTokAt x = case x of
  Vehicle.Frontend.Abs.TokAt string -> failure x

transTokMap :: Vehicle.Frontend.Abs.TokMap -> Result
transTokMap x = case x of
  Vehicle.Frontend.Abs.TokMap string -> failure x

transTokFold :: Vehicle.Frontend.Abs.TokFold -> Result
transTokFold x = case x of
  Vehicle.Frontend.Abs.TokFold string -> failure x

transTokTrue :: Vehicle.Frontend.Abs.TokTrue -> Result
transTokTrue x = case x of
  Vehicle.Frontend.Abs.TokTrue string -> failure x

transTokFalse :: Vehicle.Frontend.Abs.TokFalse -> Result
transTokFalse x = case x of
  Vehicle.Frontend.Abs.TokFalse string -> failure x

transTokTCEq :: Vehicle.Frontend.Abs.TokTCEq -> Result
transTokTCEq x = case x of
  Vehicle.Frontend.Abs.TokTCEq string -> failure x

transTokTCOrd :: Vehicle.Frontend.Abs.TokTCOrd -> Result
transTokTCOrd x = case x of
  Vehicle.Frontend.Abs.TokTCOrd string -> failure x

transTokTCContainer :: Vehicle.Frontend.Abs.TokTCContainer -> Result
transTokTCContainer x = case x of
  Vehicle.Frontend.Abs.TokTCContainer string -> failure x

transTokTCTruth :: Vehicle.Frontend.Abs.TokTCTruth -> Result
transTokTCTruth x = case x of
  Vehicle.Frontend.Abs.TokTCTruth string -> failure x

transTokTCQuantify :: Vehicle.Frontend.Abs.TokTCQuantify -> Result
transTokTCQuantify x = case x of
  Vehicle.Frontend.Abs.TokTCQuantify string -> failure x

transTokTCNatural :: Vehicle.Frontend.Abs.TokTCNatural -> Result
transTokTCNatural x = case x of
  Vehicle.Frontend.Abs.TokTCNatural string -> failure x

transTokTCIntegral :: Vehicle.Frontend.Abs.TokTCIntegral -> Result
transTokTCIntegral x = case x of
  Vehicle.Frontend.Abs.TokTCIntegral string -> failure x

transTokTCRational :: Vehicle.Frontend.Abs.TokTCRational -> Result
transTokTCRational x = case x of
  Vehicle.Frontend.Abs.TokTCRational string -> failure x

transTokTCReal :: Vehicle.Frontend.Abs.TokTCReal -> Result
transTokTCReal x = case x of
  Vehicle.Frontend.Abs.TokTCReal string -> failure x

transName :: Vehicle.Frontend.Abs.Name -> Result
transName x = case x of
  Vehicle.Frontend.Abs.Name string -> failure x

transHoleToken :: Vehicle.Frontend.Abs.HoleToken -> Result
transHoleToken x = case x of
  Vehicle.Frontend.Abs.HoleToken string -> failure x

transRational :: Vehicle.Frontend.Abs.Rational -> Result
transRational x = case x of
  Vehicle.Frontend.Abs.Rational string -> failure x

transBinder :: Vehicle.Frontend.Abs.Binder -> Result
transBinder x = case x of
  Vehicle.Frontend.Abs.ExplicitBinder name -> failure x
  Vehicle.Frontend.Abs.ExplicitBinderAnn name tokelemof expr -> failure x
  Vehicle.Frontend.Abs.ImplicitBinder name -> failure x
  Vehicle.Frontend.Abs.ImplicitBinderAnn name tokelemof expr -> failure x
  Vehicle.Frontend.Abs.InstanceBinder name -> failure x
  Vehicle.Frontend.Abs.InstanceBinderAnn name tokelemof expr -> failure x

transArg :: Vehicle.Frontend.Abs.Arg -> Result
transArg x = case x of
  Vehicle.Frontend.Abs.ExplicitArg expr -> failure x
  Vehicle.Frontend.Abs.ImplicitArg expr -> failure x
  Vehicle.Frontend.Abs.InstanceArg expr -> failure x

transLetDecl :: Vehicle.Frontend.Abs.LetDecl -> Result
transLetDecl x = case x of
  Vehicle.Frontend.Abs.LDecl binder expr -> failure x

transLit :: Vehicle.Frontend.Abs.Lit -> Result
transLit x = case x of
  Vehicle.Frontend.Abs.LitInt integer -> failure x
  Vehicle.Frontend.Abs.LitRat rational -> failure x
  Vehicle.Frontend.Abs.LitTrue toktrue -> failure x
  Vehicle.Frontend.Abs.LitFalse tokfalse -> failure x

transExpr :: Vehicle.Frontend.Abs.Expr -> Result
transExpr x = case x of
  Vehicle.Frontend.Abs.Type integer -> failure x
  Vehicle.Frontend.Abs.Ann expr1 tokelemof expr2 -> failure x
  Vehicle.Frontend.Abs.Forall tokforall binders tokdot expr -> failure x
  Vehicle.Frontend.Abs.Let letdecls expr -> failure x
  Vehicle.Frontend.Abs.Lam toklambda binders tokarrow expr -> failure x
  Vehicle.Frontend.Abs.App expr arg -> failure x
  Vehicle.Frontend.Abs.Fun expr1 tokarrow expr2 -> failure x
  Vehicle.Frontend.Abs.Var name -> failure x
  Vehicle.Frontend.Abs.Literal lit -> failure x
  Vehicle.Frontend.Abs.Hole holetoken -> failure x
  Vehicle.Frontend.Abs.List toklist expr -> failure x
  Vehicle.Frontend.Abs.Tensor toktensor expr1 expr2 -> failure x
  Vehicle.Frontend.Abs.Bool tokbool -> failure x
  Vehicle.Frontend.Abs.Prop tokprop -> failure x
  Vehicle.Frontend.Abs.Real tokreal -> failure x
  Vehicle.Frontend.Abs.Rat tokrat -> failure x
  Vehicle.Frontend.Abs.Int tokint -> failure x
  Vehicle.Frontend.Abs.Nat toknat -> failure x
  Vehicle.Frontend.Abs.If tokif expr1 tokthen expr2 tokelse expr3 -> failure x
  Vehicle.Frontend.Abs.Impl expr1 tokimpl expr2 -> failure x
  Vehicle.Frontend.Abs.And expr1 tokand expr2 -> failure x
  Vehicle.Frontend.Abs.Or expr1 tokor expr2 -> failure x
  Vehicle.Frontend.Abs.Eq expr1 tokeq expr2 -> failure x
  Vehicle.Frontend.Abs.Neq expr1 tokneq expr2 -> failure x
  Vehicle.Frontend.Abs.Not toknot expr -> failure x
  Vehicle.Frontend.Abs.Le expr1 tokle expr2 -> failure x
  Vehicle.Frontend.Abs.Lt expr1 toklt expr2 -> failure x
  Vehicle.Frontend.Abs.Ge expr1 tokge expr2 -> failure x
  Vehicle.Frontend.Abs.Gt expr1 tokgt expr2 -> failure x
  Vehicle.Frontend.Abs.Add expr1 tokadd expr2 -> failure x
  Vehicle.Frontend.Abs.Sub expr1 toksub expr2 -> failure x
  Vehicle.Frontend.Abs.Mul expr1 tokmul expr2 -> failure x
  Vehicle.Frontend.Abs.Div expr1 tokdiv expr2 -> failure x
  Vehicle.Frontend.Abs.Neg toksub expr -> failure x
  Vehicle.Frontend.Abs.LSeq tokseqopen exprs tokseqclose -> failure x
  Vehicle.Frontend.Abs.Cons expr1 tokcons expr2 -> failure x
  Vehicle.Frontend.Abs.At expr1 tokat expr2 -> failure x
  Vehicle.Frontend.Abs.Map tokmap expr1 expr2 -> failure x
  Vehicle.Frontend.Abs.Fold tokfold expr1 expr2 expr3 -> failure x
  Vehicle.Frontend.Abs.Every tokevery binders tokdot expr -> failure x
  Vehicle.Frontend.Abs.Some toksome binders tokdot expr -> failure x
  Vehicle.Frontend.Abs.EveryIn tokevery binders expr1 tokdot expr2 -> failure x
  Vehicle.Frontend.Abs.SomeIn toksome binders expr1 tokdot expr2 -> failure x
  Vehicle.Frontend.Abs.TCEq toktceq expr1 expr2 -> failure x
  Vehicle.Frontend.Abs.TCOrd toktcord expr1 expr2 -> failure x
  Vehicle.Frontend.Abs.TCCont toktccontainer expr1 expr2 -> failure x
  Vehicle.Frontend.Abs.TCTruth toktctruth expr -> failure x
  Vehicle.Frontend.Abs.TCQuant toktcquantify expr -> failure x
  Vehicle.Frontend.Abs.TCNat toktcnatural expr -> failure x
  Vehicle.Frontend.Abs.TCInt toktcintegral expr -> failure x
  Vehicle.Frontend.Abs.TCRat toktcrational expr -> failure x
  Vehicle.Frontend.Abs.TCReal toktcreal expr -> failure x

transDecl :: Vehicle.Frontend.Abs.Decl -> Result
transDecl x = case x of
  Vehicle.Frontend.Abs.DeclNetw name tokelemof expr -> failure x
  Vehicle.Frontend.Abs.DeclData name tokelemof expr -> failure x
  Vehicle.Frontend.Abs.DefType name binders expr -> failure x
  Vehicle.Frontend.Abs.DefFunType name tokelemof expr -> failure x
  Vehicle.Frontend.Abs.DefFunExpr name binders expr -> failure x

transProg :: Vehicle.Frontend.Abs.Prog -> Result
transProg x = case x of
  Vehicle.Frontend.Abs.Main decls -> failure x
