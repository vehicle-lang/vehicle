-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.3).

-- Lexer definition for use with Alex 3
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}

{-# LANGUAGE PatternSynonyms #-}

module Vehicle.External.Lex where

import Prelude

import qualified Data.Text
import qualified Data.Bits
import Data.Char     (ord)
import Data.Function (on)
import Data.Word     (Word8)
}

-- Predefined character classes

$c = [A-Z\192-\221] # [\215]  -- capital isolatin1 letter (215 = \times) FIXME
$s = [a-z\222-\255] # [\247]  -- small   isolatin1 letter (247 = \div  ) FIXME
$l = [$c $s]         -- letter
$d = [0-9]           -- digit
$i = [$l $d _ ']     -- identifier character
$u = [. \n]          -- universal: any character

-- Symbols and non-identifier-like reserved words

@rsyms = \( | \) | \{ | \} | \{ \{ | \} \} | \= | \, | \;

:-

-- Line comment "--"
"--" [.]* ;

-- Block comment "{-" "-}"
\{ \- [$u # \-]* \- ([$u # [\- \}]] [$u # \-]* \- | \-)* \} ;

-- Whitespace (skipped)
$white+ ;

-- Symbols
@rsyms
    { tok (eitherResIdent TV) }

-- token TokArrow
\- \>
    { tok (eitherResIdent T_TokArrow) }

-- token TokForallT
f o r a l l T
    { tok (eitherResIdent T_TokForallT) }

-- token TokIf
i f
    { tok (eitherResIdent T_TokIf) }

-- token TokThen
t h e n
    { tok (eitherResIdent T_TokThen) }

-- token TokElse
e l s e
    { tok (eitherResIdent T_TokElse) }

-- token TokDot
\.
    { tok (eitherResIdent T_TokDot) }

-- token TokElemOf
\:
    { tok (eitherResIdent T_TokElemOf) }

-- token TokLambda
\\
    { tok (eitherResIdent T_TokLambda) }

-- token TokTensor
T e n s o r
    { tok (eitherResIdent T_TokTensor) }

-- token TokList
L i s t
    { tok (eitherResIdent T_TokList) }

-- token TokReal
R e a l
    { tok (eitherResIdent T_TokReal) }

-- token TokRat
R a t
    { tok (eitherResIdent T_TokRat) }

-- token TokInt
I n t
    { tok (eitherResIdent T_TokInt) }

-- token TokNat
N a t
    { tok (eitherResIdent T_TokNat) }

-- token TokBool
B o o l
    { tok (eitherResIdent T_TokBool) }

-- token TokProp
P r o p
    { tok (eitherResIdent T_TokProp) }

-- token TokFin
F i n
    { tok (eitherResIdent T_TokFin) }

-- token TokForall
f o r a l l
    { tok (eitherResIdent T_TokForall) }

-- token TokExists
e x i s t s
    { tok (eitherResIdent T_TokExists) }

-- token TokImpl
\= \>
    { tok (eitherResIdent T_TokImpl) }

-- token TokAnd
a n d
    { tok (eitherResIdent T_TokAnd) }

-- token TokOr
o r
    { tok (eitherResIdent T_TokOr) }

-- token TokNot
n o t
    { tok (eitherResIdent T_TokNot) }

-- token TokEq
\= \=
    { tok (eitherResIdent T_TokEq) }

-- token TokNeq
\! \=
    { tok (eitherResIdent T_TokNeq) }

-- token TokLe
\< \=
    { tok (eitherResIdent T_TokLe) }

-- token TokLt
\<
    { tok (eitherResIdent T_TokLt) }

-- token TokGe
\> \=
    { tok (eitherResIdent T_TokGe) }

-- token TokGt
\>
    { tok (eitherResIdent T_TokGt) }

-- token TokMul
\*
    { tok (eitherResIdent T_TokMul) }

-- token TokDiv
\/
    { tok (eitherResIdent T_TokDiv) }

-- token TokAdd
\+
    { tok (eitherResIdent T_TokAdd) }

-- token TokSub
\-
    { tok (eitherResIdent T_TokSub) }

-- token TokSeqOpen
\[
    { tok (eitherResIdent T_TokSeqOpen) }

-- token TokSeqClose
\]
    { tok (eitherResIdent T_TokSeqClose) }

-- token TokCons
\: \:
    { tok (eitherResIdent T_TokCons) }

-- token TokAt
\!
    { tok (eitherResIdent T_TokAt) }

-- token TokMap
m a p
    { tok (eitherResIdent T_TokMap) }

-- token TokFold
f o l d
    { tok (eitherResIdent T_TokFold) }

-- token TokTrue
T r u e
    { tok (eitherResIdent T_TokTrue) }

-- token TokFalse
F a l s e
    { tok (eitherResIdent T_TokFalse) }

-- token TokTCEq
H a s E q
    { tok (eitherResIdent T_TokTCEq) }

-- token TokTCOrd
H a s O r d
    { tok (eitherResIdent T_TokTCOrd) }

-- token TokTCContainer
I s C o n t a i n e r
    { tok (eitherResIdent T_TokTCContainer) }

-- token TokTCTruth
I s T r u t h
    { tok (eitherResIdent T_TokTCTruth) }

-- token TokTCNatOps
H a s N a t O p e r a t i o n s
    { tok (eitherResIdent T_TokTCNatOps) }

-- token TokTCIntOps
H a s I n t O p e r a t i o n s
    { tok (eitherResIdent T_TokTCIntOps) }

-- token TokTCRatOps
H a s R a t O p e r a t i o n s
    { tok (eitherResIdent T_TokTCRatOps) }

-- token TokTCNatLits
H a s N a t L i t e r a l s U p T o
    { tok (eitherResIdent T_TokTCNatLits) }

-- token TokTCIntLits
H a s I n t L i t e r a l s
    { tok (eitherResIdent T_TokTCIntLits) }

-- token TokTCRatLits
H a s R a t L i t e r a l s
    { tok (eitherResIdent T_TokTCRatLits) }

-- token TokLet
l e t
    { tok (eitherResIdent T_TokLet) }

-- token Name
$l (\_ | ($d | $l)) *
    { tok (eitherResIdent T_Name) }

-- token HoleToken
\? (\_ | ($d | $l)) *
    { tok (eitherResIdent T_HoleToken) }

-- token TypeToken
T y p e $d +
    { tok (eitherResIdent T_TypeToken) }

-- token Natural
$d +
    { tok (eitherResIdent T_Natural) }

-- token Rational
$d + \. $d +
    { tok (eitherResIdent T_Rational) }

-- Keywords and Ident
$l $i*
    { tok (eitherResIdent TV) }

-- Integer
$d+
    { tok TI }

{
-- | Create a token with position.
tok :: (Data.Text.Text -> Tok) -> (Posn -> Data.Text.Text -> Token)
tok f p = PT p . f

-- | Token without position.
data Tok
  = TK {-# UNPACK #-} !TokSymbol  -- ^ Reserved word or symbol.
  | TL !Data.Text.Text            -- ^ String literal.
  | TI !Data.Text.Text            -- ^ Integer literal.
  | TV !Data.Text.Text            -- ^ Identifier.
  | TD !Data.Text.Text            -- ^ Float literal.
  | TC !Data.Text.Text            -- ^ Character literal.
  | T_TokArrow !Data.Text.Text
  | T_TokForallT !Data.Text.Text
  | T_TokIf !Data.Text.Text
  | T_TokThen !Data.Text.Text
  | T_TokElse !Data.Text.Text
  | T_TokDot !Data.Text.Text
  | T_TokElemOf !Data.Text.Text
  | T_TokLambda !Data.Text.Text
  | T_TokTensor !Data.Text.Text
  | T_TokList !Data.Text.Text
  | T_TokReal !Data.Text.Text
  | T_TokRat !Data.Text.Text
  | T_TokInt !Data.Text.Text
  | T_TokNat !Data.Text.Text
  | T_TokBool !Data.Text.Text
  | T_TokProp !Data.Text.Text
  | T_TokFin !Data.Text.Text
  | T_TokForall !Data.Text.Text
  | T_TokExists !Data.Text.Text
  | T_TokImpl !Data.Text.Text
  | T_TokAnd !Data.Text.Text
  | T_TokOr !Data.Text.Text
  | T_TokNot !Data.Text.Text
  | T_TokEq !Data.Text.Text
  | T_TokNeq !Data.Text.Text
  | T_TokLe !Data.Text.Text
  | T_TokLt !Data.Text.Text
  | T_TokGe !Data.Text.Text
  | T_TokGt !Data.Text.Text
  | T_TokMul !Data.Text.Text
  | T_TokDiv !Data.Text.Text
  | T_TokAdd !Data.Text.Text
  | T_TokSub !Data.Text.Text
  | T_TokSeqOpen !Data.Text.Text
  | T_TokSeqClose !Data.Text.Text
  | T_TokCons !Data.Text.Text
  | T_TokAt !Data.Text.Text
  | T_TokMap !Data.Text.Text
  | T_TokFold !Data.Text.Text
  | T_TokTrue !Data.Text.Text
  | T_TokFalse !Data.Text.Text
  | T_TokTCEq !Data.Text.Text
  | T_TokTCOrd !Data.Text.Text
  | T_TokTCContainer !Data.Text.Text
  | T_TokTCTruth !Data.Text.Text
  | T_TokTCNatOps !Data.Text.Text
  | T_TokTCIntOps !Data.Text.Text
  | T_TokTCRatOps !Data.Text.Text
  | T_TokTCNatLits !Data.Text.Text
  | T_TokTCIntLits !Data.Text.Text
  | T_TokTCRatLits !Data.Text.Text
  | T_TokLet !Data.Text.Text
  | T_Name !Data.Text.Text
  | T_HoleToken !Data.Text.Text
  | T_TypeToken !Data.Text.Text
  | T_Natural !Data.Text.Text
  | T_Rational !Data.Text.Text
  deriving (Eq, Show, Ord)

-- | Smart constructor for 'Tok' for the sake of backwards compatibility.
pattern TS :: Data.Text.Text -> Int -> Tok
pattern TS t i = TK (TokSymbol t i)

-- | Keyword or symbol tokens have a unique ID.
data TokSymbol = TokSymbol
  { tsText :: Data.Text.Text
      -- ^ Keyword or symbol text.
  , tsID   :: !Int
      -- ^ Unique ID.
  } deriving (Show)

-- | Keyword/symbol equality is determined by the unique ID.
instance Eq  TokSymbol where (==)    = (==)    `on` tsID

-- | Keyword/symbol ordering is determined by the unique ID.
instance Ord TokSymbol where compare = compare `on` tsID

-- | Token with position.
data Token
  = PT  Posn Tok
  | Err Posn
  deriving (Eq, Show, Ord)

-- | Pretty print a position.
printPosn :: Posn -> String
printPosn (Pn _ l c) = "line " ++ show l ++ ", column " ++ show c

-- | Pretty print the position of the first token in the list.
tokenPos :: [Token] -> String
tokenPos (t:_) = printPosn (tokenPosn t)
tokenPos []    = "end of file"

-- | Get the position of a token.
tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p)  = p

-- | Get line and column of a token.
tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

-- | Get line and column of a position.
posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

-- | Convert a token into "position token" form.
mkPosToken :: Token -> ((Int, Int), Data.Text.Text)
mkPosToken t = (tokenLineCol t, tokenText t)

-- | Convert a token to its text.
tokenText :: Token -> Data.Text.Text
tokenText t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> Data.Text.pack (show s)
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  Err _         -> Data.Text.pack "#error"
  PT _ (T_TokArrow s) -> s
  PT _ (T_TokForallT s) -> s
  PT _ (T_TokIf s) -> s
  PT _ (T_TokThen s) -> s
  PT _ (T_TokElse s) -> s
  PT _ (T_TokDot s) -> s
  PT _ (T_TokElemOf s) -> s
  PT _ (T_TokLambda s) -> s
  PT _ (T_TokTensor s) -> s
  PT _ (T_TokList s) -> s
  PT _ (T_TokReal s) -> s
  PT _ (T_TokRat s) -> s
  PT _ (T_TokInt s) -> s
  PT _ (T_TokNat s) -> s
  PT _ (T_TokBool s) -> s
  PT _ (T_TokProp s) -> s
  PT _ (T_TokFin s) -> s
  PT _ (T_TokForall s) -> s
  PT _ (T_TokExists s) -> s
  PT _ (T_TokImpl s) -> s
  PT _ (T_TokAnd s) -> s
  PT _ (T_TokOr s) -> s
  PT _ (T_TokNot s) -> s
  PT _ (T_TokEq s) -> s
  PT _ (T_TokNeq s) -> s
  PT _ (T_TokLe s) -> s
  PT _ (T_TokLt s) -> s
  PT _ (T_TokGe s) -> s
  PT _ (T_TokGt s) -> s
  PT _ (T_TokMul s) -> s
  PT _ (T_TokDiv s) -> s
  PT _ (T_TokAdd s) -> s
  PT _ (T_TokSub s) -> s
  PT _ (T_TokSeqOpen s) -> s
  PT _ (T_TokSeqClose s) -> s
  PT _ (T_TokCons s) -> s
  PT _ (T_TokAt s) -> s
  PT _ (T_TokMap s) -> s
  PT _ (T_TokFold s) -> s
  PT _ (T_TokTrue s) -> s
  PT _ (T_TokFalse s) -> s
  PT _ (T_TokTCEq s) -> s
  PT _ (T_TokTCOrd s) -> s
  PT _ (T_TokTCContainer s) -> s
  PT _ (T_TokTCTruth s) -> s
  PT _ (T_TokTCNatOps s) -> s
  PT _ (T_TokTCIntOps s) -> s
  PT _ (T_TokTCRatOps s) -> s
  PT _ (T_TokTCNatLits s) -> s
  PT _ (T_TokTCIntLits s) -> s
  PT _ (T_TokTCRatLits s) -> s
  PT _ (T_TokLet s) -> s
  PT _ (T_Name s) -> s
  PT _ (T_HoleToken s) -> s
  PT _ (T_TypeToken s) -> s
  PT _ (T_Natural s) -> s
  PT _ (T_Rational s) -> s

-- | Convert a token to a string.
prToken :: Token -> String
prToken t = Data.Text.unpack (tokenText t)

-- | Finite map from text to token organized as binary search tree.
data BTree
  = N -- ^ Nil (leaf).
  | B Data.Text.Text Tok BTree BTree
      -- ^ Binary node.
  deriving (Show)

-- | Convert potential keyword into token or use fallback conversion.
eitherResIdent :: (Data.Text.Text -> Tok) -> Data.Text.Text -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) =
    case compare s a of
      LT -> treeFind left
      GT -> treeFind right
      EQ -> t

-- | The keywords and symbols of the language organized as binary search tree.
resWords :: BTree
resWords =
  b "network" 8
    (b ";" 4
       (b ")" 2 (b "(" 1 N N) (b "," 3 N N))
       (b "dataset" 6 (b "=" 5 N N) (b "in" 7 N N)))
    (b "{{" 12
       (b "type" 10 (b "parameter" 9 N N) (b "{" 11 N N))
       (b "}}" 14 (b "}" 13 N N) N))
  where
  b s n = B bs (TS bs n)
    where
    bs = Data.Text.pack s

-- | Unquote string literal.
unescapeInitTail :: Data.Text.Text -> Data.Text.Text
unescapeInitTail = Data.Text.pack . unesc . tail . Data.Text.unpack
  where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '\\':'r':cs  -> '\r' : unesc cs
    '\\':'f':cs  -> '\f' : unesc cs
    '"':[]       -> []
    c:cs         -> c : unesc cs
    _            -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
  deriving (Eq, Show, Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  Data.Text.Text)   -- current input string

tokens :: Data.Text.Text -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (Data.Text.take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case Data.Text.uncons s of
    Nothing  -> Nothing
    Just (c,s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
  where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
