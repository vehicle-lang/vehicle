-- File generated by the BNF Converter (bnfc 2.9.3).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for Vehicle.

module Vehicle.External.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Vehicle.External.Abs
import qualified Data.Text

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Vehicle.External.Abs.TokArrow where
  prt _ (Vehicle.External.Abs.TokArrow (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokForallT where
  prt _ (Vehicle.External.Abs.TokForallT (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokIf where
  prt _ (Vehicle.External.Abs.TokIf (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokThen where
  prt _ (Vehicle.External.Abs.TokThen (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokElse where
  prt _ (Vehicle.External.Abs.TokElse (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokDot where
  prt _ (Vehicle.External.Abs.TokDot (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokElemOf where
  prt _ (Vehicle.External.Abs.TokElemOf (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokLambda where
  prt _ (Vehicle.External.Abs.TokLambda (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokTensor where
  prt _ (Vehicle.External.Abs.TokTensor (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokList where
  prt _ (Vehicle.External.Abs.TokList (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokReal where
  prt _ (Vehicle.External.Abs.TokReal (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokRat where
  prt _ (Vehicle.External.Abs.TokRat (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokInt where
  prt _ (Vehicle.External.Abs.TokInt (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokNat where
  prt _ (Vehicle.External.Abs.TokNat (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokBool where
  prt _ (Vehicle.External.Abs.TokBool (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokProp where
  prt _ (Vehicle.External.Abs.TokProp (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokFin where
  prt _ (Vehicle.External.Abs.TokFin (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokForall where
  prt _ (Vehicle.External.Abs.TokForall (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokExists where
  prt _ (Vehicle.External.Abs.TokExists (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokImpl where
  prt _ (Vehicle.External.Abs.TokImpl (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokAnd where
  prt _ (Vehicle.External.Abs.TokAnd (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokOr where
  prt _ (Vehicle.External.Abs.TokOr (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokNot where
  prt _ (Vehicle.External.Abs.TokNot (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokEq where
  prt _ (Vehicle.External.Abs.TokEq (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokNeq where
  prt _ (Vehicle.External.Abs.TokNeq (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokLe where
  prt _ (Vehicle.External.Abs.TokLe (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokLt where
  prt _ (Vehicle.External.Abs.TokLt (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokGe where
  prt _ (Vehicle.External.Abs.TokGe (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokGt where
  prt _ (Vehicle.External.Abs.TokGt (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokMul where
  prt _ (Vehicle.External.Abs.TokMul (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokDiv where
  prt _ (Vehicle.External.Abs.TokDiv (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokAdd where
  prt _ (Vehicle.External.Abs.TokAdd (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokSub where
  prt _ (Vehicle.External.Abs.TokSub (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokSeqOpen where
  prt _ (Vehicle.External.Abs.TokSeqOpen (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokSeqClose where
  prt _ (Vehicle.External.Abs.TokSeqClose (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokCons where
  prt _ (Vehicle.External.Abs.TokCons (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokAt where
  prt _ (Vehicle.External.Abs.TokAt (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokMap where
  prt _ (Vehicle.External.Abs.TokMap (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokFold where
  prt _ (Vehicle.External.Abs.TokFold (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokTrue where
  prt _ (Vehicle.External.Abs.TokTrue (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokFalse where
  prt _ (Vehicle.External.Abs.TokFalse (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokTCEq where
  prt _ (Vehicle.External.Abs.TokTCEq (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokTCOrd where
  prt _ (Vehicle.External.Abs.TokTCOrd (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokTCContainer where
  prt _ (Vehicle.External.Abs.TokTCContainer (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokTCTruth where
  prt _ (Vehicle.External.Abs.TokTCTruth (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokTCNatOps where
  prt _ (Vehicle.External.Abs.TokTCNatOps (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokTCIntOps where
  prt _ (Vehicle.External.Abs.TokTCIntOps (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokTCRatOps where
  prt _ (Vehicle.External.Abs.TokTCRatOps (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokTCNatLits where
  prt _ (Vehicle.External.Abs.TokTCNatLits (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokTCIntLits where
  prt _ (Vehicle.External.Abs.TokTCIntLits (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokTCRatLits where
  prt _ (Vehicle.External.Abs.TokTCRatLits (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TokLet where
  prt _ (Vehicle.External.Abs.TokLet (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.Name where
  prt _ (Vehicle.External.Abs.Name (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.HoleToken where
  prt _ (Vehicle.External.Abs.HoleToken (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.TypeToken where
  prt _ (Vehicle.External.Abs.TypeToken (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.Natural where
  prt _ (Vehicle.External.Abs.Natural (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print Vehicle.External.Abs.Rational where
  prt _ (Vehicle.External.Abs.Rational (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print [Vehicle.External.Abs.Name] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Vehicle.External.Abs.Binder where
  prt i = \case
    Vehicle.External.Abs.ExplicitBinder name -> prPrec i 0 (concatD [prt 0 name])
    Vehicle.External.Abs.ExplicitBinderAnn name tokelemof expr -> prPrec i 0 (concatD [doc (showString "("), prt 0 name, prt 0 tokelemof, prt 1 expr, doc (showString ")")])
    Vehicle.External.Abs.ImplicitBinder name -> prPrec i 0 (concatD [doc (showString "{"), prt 0 name, doc (showString "}")])
    Vehicle.External.Abs.ImplicitBinderAnn name tokelemof expr -> prPrec i 0 (concatD [doc (showString "{"), prt 0 name, prt 0 tokelemof, prt 1 expr, doc (showString "}")])
    Vehicle.External.Abs.InstanceBinder name -> prPrec i 0 (concatD [doc (showString "{{"), prt 0 name, doc (showString "}}")])
    Vehicle.External.Abs.InstanceBinderAnn name tokelemof expr -> prPrec i 0 (concatD [doc (showString "{{"), prt 0 name, prt 0 tokelemof, prt 1 expr, doc (showString "}}")])

instance Print [Vehicle.External.Abs.Binder] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Vehicle.External.Abs.Arg where
  prt i = \case
    Vehicle.External.Abs.ExplicitArg expr -> prPrec i 0 (concatD [prt 15 expr])
    Vehicle.External.Abs.ImplicitArg expr -> prPrec i 0 (concatD [doc (showString "{"), prt 1 expr, doc (showString "}")])
    Vehicle.External.Abs.InstanceArg expr -> prPrec i 0 (concatD [doc (showString "{{"), prt 1 expr, doc (showString "}}")])

instance Print Vehicle.External.Abs.LetDecl where
  prt i = \case
    Vehicle.External.Abs.LDecl binder expr -> prPrec i 0 (concatD [prt 0 binder, doc (showString "="), prt 0 expr])

instance Print [Vehicle.External.Abs.LetDecl] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Vehicle.External.Abs.Lit where
  prt i = \case
    Vehicle.External.Abs.LitNat natural -> prPrec i 0 (concatD [prt 0 natural])
    Vehicle.External.Abs.LitRat rational -> prPrec i 0 (concatD [prt 0 rational])
    Vehicle.External.Abs.LitTrue toktrue -> prPrec i 0 (concatD [prt 0 toktrue])
    Vehicle.External.Abs.LitFalse tokfalse -> prPrec i 0 (concatD [prt 0 tokfalse])

instance Print Vehicle.External.Abs.Expr where
  prt i = \case
    Vehicle.External.Abs.Type typetoken -> prPrec i 15 (concatD [prt 0 typetoken])
    Vehicle.External.Abs.Ann expr1 tokelemof expr2 -> prPrec i 0 (concatD [prt 2 expr1, prt 0 tokelemof, prt 1 expr2])
    Vehicle.External.Abs.ForallT tokforallt binders tokdot expr -> prPrec i 1 (concatD [prt 0 tokforallt, prt 0 binders, prt 0 tokdot, prt 1 expr])
    Vehicle.External.Abs.Let toklet letdecls expr -> prPrec i 2 (concatD [prt 0 toklet, prt 0 letdecls, doc (showString "in"), prt 2 expr])
    Vehicle.External.Abs.Lam toklambda binders tokarrow expr -> prPrec i 2 (concatD [prt 0 toklambda, prt 0 binders, prt 0 tokarrow, prt 2 expr])
    Vehicle.External.Abs.Fun expr1 tokarrow expr2 -> prPrec i 11 (concatD [prt 13 expr1, prt 0 tokarrow, prt 11 expr2])
    Vehicle.External.Abs.App expr arg -> prPrec i 13 (concatD [prt 13 expr, prt 0 arg])
    Vehicle.External.Abs.Var name -> prPrec i 15 (concatD [prt 0 name])
    Vehicle.External.Abs.Literal lit -> prPrec i 15 (concatD [prt 0 lit])
    Vehicle.External.Abs.Hole holetoken -> prPrec i 15 (concatD [prt 0 holetoken])
    Vehicle.External.Abs.Forall tokforall binders tokdot expr -> prPrec i 2 (concatD [prt 0 tokforall, prt 0 binders, prt 0 tokdot, prt 2 expr])
    Vehicle.External.Abs.Exists tokexists binders tokdot expr -> prPrec i 2 (concatD [prt 0 tokexists, prt 0 binders, prt 0 tokdot, prt 2 expr])
    Vehicle.External.Abs.ForallIn tokforall binders expr1 tokdot expr2 -> prPrec i 2 (concatD [prt 0 tokforall, prt 0 binders, doc (showString "in"), prt 3 expr1, prt 0 tokdot, prt 2 expr2])
    Vehicle.External.Abs.ExistsIn tokexists binders expr1 tokdot expr2 -> prPrec i 2 (concatD [prt 0 tokexists, prt 0 binders, doc (showString "in"), prt 3 expr1, prt 0 tokdot, prt 2 expr2])
    Vehicle.External.Abs.If tokif expr1 tokthen expr2 tokelse expr3 -> prPrec i 4 (concatD [prt 0 tokif, prt 5 expr1, prt 0 tokthen, prt 5 expr2, prt 0 tokelse, prt 5 expr3])
    Vehicle.External.Abs.Impl expr1 tokimpl expr2 -> prPrec i 5 (concatD [prt 6 expr1, prt 0 tokimpl, prt 5 expr2])
    Vehicle.External.Abs.And expr1 tokand expr2 -> prPrec i 7 (concatD [prt 8 expr1, prt 0 tokand, prt 7 expr2])
    Vehicle.External.Abs.Or expr1 tokor expr2 -> prPrec i 7 (concatD [prt 8 expr1, prt 0 tokor, prt 7 expr2])
    Vehicle.External.Abs.Eq expr1 tokeq expr2 -> prPrec i 8 (concatD [prt 9 expr1, prt 0 tokeq, prt 9 expr2])
    Vehicle.External.Abs.Neq expr1 tokneq expr2 -> prPrec i 8 (concatD [prt 9 expr1, prt 0 tokneq, prt 9 expr2])
    Vehicle.External.Abs.Not toknot expr -> prPrec i 11 (concatD [prt 0 toknot, prt 11 expr])
    Vehicle.External.Abs.Le expr1 tokle expr2 -> prPrec i 8 (concatD [prt 8 expr1, prt 0 tokle, prt 9 expr2])
    Vehicle.External.Abs.Lt expr1 toklt expr2 -> prPrec i 8 (concatD [prt 8 expr1, prt 0 toklt, prt 9 expr2])
    Vehicle.External.Abs.Ge expr1 tokge expr2 -> prPrec i 8 (concatD [prt 8 expr1, prt 0 tokge, prt 9 expr2])
    Vehicle.External.Abs.Gt expr1 tokgt expr2 -> prPrec i 8 (concatD [prt 8 expr1, prt 0 tokgt, prt 9 expr2])
    Vehicle.External.Abs.Add expr1 tokadd expr2 -> prPrec i 9 (concatD [prt 9 expr1, prt 0 tokadd, prt 10 expr2])
    Vehicle.External.Abs.Sub expr1 toksub expr2 -> prPrec i 9 (concatD [prt 9 expr1, prt 0 toksub, prt 10 expr2])
    Vehicle.External.Abs.Mul expr1 tokmul expr2 -> prPrec i 10 (concatD [prt 10 expr1, prt 0 tokmul, prt 11 expr2])
    Vehicle.External.Abs.Div expr1 tokdiv expr2 -> prPrec i 10 (concatD [prt 10 expr1, prt 0 tokdiv, prt 11 expr2])
    Vehicle.External.Abs.Neg toksub expr -> prPrec i 11 (concatD [prt 0 toksub, prt 11 expr])
    Vehicle.External.Abs.LSeq tokseqopen exprs tokseqclose -> prPrec i 15 (concatD [prt 0 tokseqopen, prt 0 exprs, prt 0 tokseqclose])
    Vehicle.External.Abs.Cons expr1 tokcons expr2 -> prPrec i 4 (concatD [prt 5 expr1, prt 0 tokcons, prt 4 expr2])
    Vehicle.External.Abs.At expr1 tokat expr2 -> prPrec i 12 (concatD [prt 12 expr1, prt 0 tokat, prt 13 expr2])
    Vehicle.External.Abs.Map tokmap expr1 expr2 -> prPrec i 13 (concatD [prt 0 tokmap, prt 15 expr1, prt 15 expr2])
    Vehicle.External.Abs.Fold tokfold expr1 expr2 expr3 -> prPrec i 13 (concatD [prt 0 tokfold, prt 15 expr1, prt 15 expr2, prt 15 expr3])
    Vehicle.External.Abs.List toklist expr -> prPrec i 14 (concatD [prt 0 toklist, prt 15 expr])
    Vehicle.External.Abs.Tensor toktensor expr1 expr2 -> prPrec i 14 (concatD [prt 0 toktensor, prt 15 expr1, prt 15 expr2])
    Vehicle.External.Abs.Fin tokfin expr -> prPrec i 14 (concatD [prt 0 tokfin, prt 15 expr])
    Vehicle.External.Abs.Bool tokbool -> prPrec i 15 (concatD [prt 0 tokbool])
    Vehicle.External.Abs.Prop tokprop -> prPrec i 15 (concatD [prt 0 tokprop])
    Vehicle.External.Abs.Real tokreal -> prPrec i 15 (concatD [prt 0 tokreal])
    Vehicle.External.Abs.Rat tokrat -> prPrec i 15 (concatD [prt 0 tokrat])
    Vehicle.External.Abs.Int tokint -> prPrec i 15 (concatD [prt 0 tokint])
    Vehicle.External.Abs.Nat toknat -> prPrec i 15 (concatD [prt 0 toknat])
    Vehicle.External.Abs.TCEq toktceq expr1 expr2 -> prPrec i 15 (concatD [prt 0 toktceq, prt 15 expr1, prt 15 expr2])
    Vehicle.External.Abs.TCOrd toktcord expr1 expr2 -> prPrec i 15 (concatD [prt 0 toktcord, prt 15 expr1, prt 15 expr2])
    Vehicle.External.Abs.TCCont toktccontainer expr1 expr2 -> prPrec i 15 (concatD [prt 0 toktccontainer, prt 15 expr1, prt 15 expr2])
    Vehicle.External.Abs.TCTruth toktctruth expr -> prPrec i 15 (concatD [prt 0 toktctruth, prt 15 expr])
    Vehicle.External.Abs.TCNatOps toktcnatops expr -> prPrec i 15 (concatD [prt 0 toktcnatops, prt 15 expr])
    Vehicle.External.Abs.TCIntOps toktcintops expr -> prPrec i 15 (concatD [prt 0 toktcintops, prt 15 expr])
    Vehicle.External.Abs.TCRatOps toktcratops expr -> prPrec i 15 (concatD [prt 0 toktcratops, prt 15 expr])
    Vehicle.External.Abs.TCIntLits toktcintlits expr -> prPrec i 15 (concatD [prt 0 toktcintlits, prt 15 expr])
    Vehicle.External.Abs.TCRatLits toktcratlits expr -> prPrec i 15 (concatD [prt 0 toktcratlits, prt 15 expr])
    Vehicle.External.Abs.TCNatLits toktcnatlits n expr -> prPrec i 15 (concatD [prt 0 toktcnatlits, prt 0 n, prt 15 expr])

instance Print [Vehicle.External.Abs.Expr] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Vehicle.External.Abs.Decl where
  prt i = \case
    Vehicle.External.Abs.DeclNetw name tokelemof expr -> prPrec i 0 (concatD [doc (showString "network"), prt 0 name, prt 0 tokelemof, prt 0 expr])
    Vehicle.External.Abs.DeclData name tokelemof expr -> prPrec i 0 (concatD [doc (showString "dataset"), prt 0 name, prt 0 tokelemof, prt 0 expr])
    Vehicle.External.Abs.DeclParam name tokelemof expr -> prPrec i 0 (concatD [doc (showString "parameter"), prt 0 name, prt 0 tokelemof, prt 0 expr])
    Vehicle.External.Abs.DefType name binders expr -> prPrec i 0 (concatD [doc (showString "type"), prt 0 name, prt 0 binders, doc (showString "="), prt 0 expr])
    Vehicle.External.Abs.DefFunType name tokelemof expr -> prPrec i 0 (concatD [prt 0 name, prt 0 tokelemof, prt 0 expr])
    Vehicle.External.Abs.DefFunExpr name binders expr -> prPrec i 0 (concatD [prt 0 name, prt 0 binders, doc (showString "="), prt 0 expr])

instance Print [Vehicle.External.Abs.Decl] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print Vehicle.External.Abs.Prog where
  prt i = \case
    Vehicle.External.Abs.Main decls -> prPrec i 0 (concatD [prt 0 decls])
