The Language External
BNF Converter


%Process by txt2tags to generate html or latex



This document was automatically generated by the //BNF-Converter//. It was generated together with the lexer, the parser, and the abstract syntax module, which guarantees that the document matches with the implementation of the language (provided no hand-hacking has taken place).

==The lexical structure of External==

===Literals===






















































Boolean literals are recognized by the regular expression
`````{"True"} | {"False"}`````

Natural literals are recognized by the regular expression
`````digit+`````

Rational literals are recognized by the regular expression
`````digit+ '.' digit+`````

TokNetwork literals are recognized by the regular expression
`````{"@network"}`````

TokDataset literals are recognized by the regular expression
`````{"@dataset"}`````

TokParameter literals are recognized by the regular expression
`````{"@parameter"}`````

TokProperty literals are recognized by the regular expression
`````{"@property"}`````

TokArrow literals are recognized by the regular expression
`````{"->"}`````

TokForallT literals are recognized by the regular expression
`````{"forallT"}`````

TokIf literals are recognized by the regular expression
`````{"if"}`````

TokThen literals are recognized by the regular expression
`````{"then"}`````

TokElse literals are recognized by the regular expression
`````{"else"}`````

TokDot literals are recognized by the regular expression
`````'.'`````

TokElemOf literals are recognized by the regular expression
`````':'`````

TokLambda literals are recognized by the regular expression
`````'\'`````

TokLet literals are recognized by the regular expression
`````{"let"}`````

TokUnit literals are recognized by the regular expression
`````{"Unit"}`````

TokBool literals are recognized by the regular expression
`````{"Bool"}`````

TokNat literals are recognized by the regular expression
`````{"Nat"}`````

TokInt literals are recognized by the regular expression
`````{"Int"}`````

TokRat literals are recognized by the regular expression
`````{"Rat"}`````

TokVector literals are recognized by the regular expression
`````{"Vector"}`````

TokTensor literals are recognized by the regular expression
`````{"Tensor"}`````

TokList literals are recognized by the regular expression
`````{"List"}`````

TokIndex literals are recognized by the regular expression
`````{"Index"}`````

TokForall literals are recognized by the regular expression
`````{"forall"}`````

TokExists literals are recognized by the regular expression
`````{"exists"}`````

TokForeach literals are recognized by the regular expression
`````{"foreach"}`````

TokImpl literals are recognized by the regular expression
`````{"=>"}`````

TokAnd literals are recognized by the regular expression
`````{"and"}`````

TokOr literals are recognized by the regular expression
`````{"or"}`````

TokNot literals are recognized by the regular expression
`````{"not"}`````

TokEq literals are recognized by the regular expression
`````{"=="}`````

TokNeq literals are recognized by the regular expression
`````{"!="}`````

TokLe literals are recognized by the regular expression
`````{"<="}`````

TokLt literals are recognized by the regular expression
`````'<'`````

TokGe literals are recognized by the regular expression
`````{">="}`````

TokGt literals are recognized by the regular expression
`````'>'`````

TokMul literals are recognized by the regular expression
`````'*'`````

TokDiv literals are recognized by the regular expression
`````'/'`````

TokAdd literals are recognized by the regular expression
`````'+'`````

TokSub literals are recognized by the regular expression
`````'-'`````

TokNil literals are recognized by the regular expression
`````{"nil"}`````

TokSeqOpen literals are recognized by the regular expression
`````'['`````

TokSeqClose literals are recognized by the regular expression
`````']'`````

TokCons literals are recognized by the regular expression
`````{"::"}`````

TokAt literals are recognized by the regular expression
`````'!'`````

TokMap literals are recognized by the regular expression
`````{"map"}`````

TokFold literals are recognized by the regular expression
`````{"fold"}`````

Name literals are recognized by the regular expression
`````letter ('_' | digit | letter)*`````

HoleToken literals are recognized by the regular expression
`````'?' ('_' | digit | letter)*`````

TypeToken literals are recognized by the regular expression
`````{"Type"} digit+`````

DeclAnnOptionValue literals are recognized by the regular expression
`````(digit | letter)+`````


===Reserved words and symbols===
The set of reserved words is the set of terminals appearing in the grammar. Those reserved words that consist of non-letter characters are called symbols, and they are treated in a different way from those that are similar to identifiers. The lexer follows rules familiar from languages like Haskell, C, and Java, including longest match and spacing conventions.

The reserved words used in External are the following:
  | ``in`` | ``type`` |  |

The symbols used in External are the following:
  | ( | ) | { | }
  | {{ | }} | = | ,
  | () | ; |  |

===Comments===
Single-line comments begin with --.Multiple-line comments are  enclosed with {- and -}.

==The syntactic structure of External==
Non-terminals are enclosed between < and >.
The symbols -> (production),  **|**  (union)
and **eps** (empty rule) belong to the BNF notation.
All other symbols are terminals.

  | //[Name]// | -> | **eps**
  |  |  **|**  | //Name// //[Name]//
  | //Binder// | -> | //Name//
  |  |  **|**  | ``(`` //Name// //TokElemOf// //Expr1// ``)``
  |  |  **|**  | ``{`` //Name// ``}``
  |  |  **|**  | ``{`` //Name// //TokElemOf// //Expr1// ``}``
  |  |  **|**  | ``{{`` //Name// ``}}``
  |  |  **|**  | ``{{`` //Name// //TokElemOf// //Expr1// ``}}``
  | //[Binder]// | -> | **eps**
  |  |  **|**  | //Binder// //[Binder]//
  | //Arg// | -> | //Expr15//
  |  |  **|**  | ``{`` //Expr1// ``}``
  |  |  **|**  | ``{{`` //Expr1// ``}}``
  | //LetDecl// | -> | //Binder// ``=`` //Expr//
  | //[LetDecl]// | -> | **eps**
  |  |  **|**  | //LetDecl//
  |  |  **|**  | //LetDecl// ``,`` //[LetDecl]//
  | //Lit// | -> | ``()``
  |  |  **|**  | //Natural//
  |  |  **|**  | //Rational//
  |  |  **|**  | //Boolean//
  | //Expr15// | -> | //TypeToken//
  |  |  **|**  | //Name//
  |  |  **|**  | //Lit//
  |  |  **|**  | //HoleToken//
  |  |  **|**  | //TokSeqOpen// //[Expr]// //TokSeqClose//
  |  |  **|**  | //TokNil//
  |  |  **|**  | //TokUnit//
  |  |  **|**  | //TokBool//
  |  |  **|**  | //TokRat//
  |  |  **|**  | //TokInt//
  |  |  **|**  | //TokNat//
  |  |  **|**  | ``(`` //Expr// ``)``
  | //Expr// | -> | //Expr2// //TokElemOf// //Expr1//
  |  |  **|**  | //Expr1//
  | //Expr1// | -> | //TokForallT// //[Binder]// //TokDot// //Expr1//
  |  |  **|**  | //Expr2//
  | //Expr2// | -> | //TokLet// //[LetDecl]// ``in`` //Expr2//
  |  |  **|**  | //TokLambda// //[Binder]// //TokArrow// //Expr2//
  |  |  **|**  | //TokForall// //[Binder]// //TokDot// //Expr2//
  |  |  **|**  | //TokExists// //[Binder]// //TokDot// //Expr2//
  |  |  **|**  | //TokForall// //[Binder]// ``in`` //Expr3// //TokDot// //Expr2//
  |  |  **|**  | //TokExists// //[Binder]// ``in`` //Expr3// //TokDot// //Expr2//
  |  |  **|**  | //TokForeach// //[Binder]// //TokDot// //Expr2//
  |  |  **|**  | //Expr3//
  | //Expr11// | -> | //Expr13// //TokArrow// //Expr11//
  |  |  **|**  | //TokNot// //Expr11//
  |  |  **|**  | //TokSub// //Expr11//
  |  |  **|**  | //Expr12//
  | //Expr13// | -> | //Expr13// //Arg//
  |  |  **|**  | //TokMap// //Expr15// //Expr15//
  |  |  **|**  | //TokFold// //Expr15// //Expr15// //Expr15//
  |  |  **|**  | //Expr14//
  | //Expr4// | -> | //TokIf// //Expr5// //TokThen// //Expr5// //TokElse// //Expr5//
  |  |  **|**  | //Expr5// //TokCons// //Expr4//
  |  |  **|**  | //Expr5//
  | //Expr5// | -> | //Expr6// //TokImpl// //Expr5//
  |  |  **|**  | //Expr6//
  | //Expr7// | -> | //Expr8// //TokAnd// //Expr7//
  |  |  **|**  | //Expr8// //TokOr// //Expr7//
  |  |  **|**  | //Expr8//
  | //Expr8// | -> | //Expr9// //TokEq// //Expr9//
  |  |  **|**  | //Expr9// //TokNeq// //Expr9//
  |  |  **|**  | //Expr8// //TokLe// //Expr9//
  |  |  **|**  | //Expr8// //TokLt// //Expr9//
  |  |  **|**  | //Expr8// //TokGe// //Expr9//
  |  |  **|**  | //Expr8// //TokGt// //Expr9//
  |  |  **|**  | //Expr9//
  | //Expr9// | -> | //Expr9// //TokAdd// //Expr10//
  |  |  **|**  | //Expr9// //TokSub// //Expr10//
  |  |  **|**  | //Expr10//
  | //Expr10// | -> | //Expr10// //TokMul// //Expr11//
  |  |  **|**  | //Expr10// //TokDiv// //Expr11//
  |  |  **|**  | //Expr11//
  | //Expr12// | -> | //Expr12// //TokAt// //Expr13//
  |  |  **|**  | //Expr13//
  | //Expr14// | -> | //TokList// //Expr15//
  |  |  **|**  | //TokVector// //Expr15// //Expr15//
  |  |  **|**  | //TokTensor// //Expr15// //Expr15//
  |  |  **|**  | //TokIndex// //Expr15//
  |  |  **|**  | //Expr15//
  | //Expr3// | -> | //Expr4//
  | //Expr6// | -> | //Expr7//
  | //[Expr]// | -> | **eps**
  |  |  **|**  | //Expr//
  |  |  **|**  | //Expr// ``,`` //[Expr]//
  | //DeclAnnName// | -> | //TokNetwork//
  |  |  **|**  | //TokDataset//
  |  |  **|**  | //TokParameter//
  |  |  **|**  | //TokProperty//
  | //DeclAnnOption// | -> | //Name// ``=`` //Boolean//
  | //[DeclAnnOption]// | -> | **eps**
  |  |  **|**  | //DeclAnnOption//
  |  |  **|**  | //DeclAnnOption// ``,`` //[DeclAnnOption]//
  | //DeclAnnOpts// | -> | ``(`` //[DeclAnnOption]// ``)``
  |  |  **|**  | **eps**
  | //Decl// | -> | //DeclAnnName// //DeclAnnOpts//
  |  |  **|**  | ``type`` //Name// //[Binder]// ``=`` //Expr//
  |  |  **|**  | //Name// //TokElemOf// //Expr//
  |  |  **|**  | //Name// //[Binder]// ``=`` //Expr//
  | //[Decl]// | -> | **eps**
  |  |  **|**  | //Decl//
  |  |  **|**  | //Decl// ``;`` //[Decl]//
  | //Prog// | -> | //[Decl]//



%% File generated by the BNF Converter (bnfc 2.9.3).
