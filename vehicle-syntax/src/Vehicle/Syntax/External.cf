-- Grammar of the Vehicle External language

comment "--";
comment "{-" "-}";

-- * Tokens

-- NOTE: Token rules are tried IN ORDER, so the order matters!
position token Boolean  ({"True"} | {"False"});
position token Natural  (digit+);
position token Rational (digit+ '.' digit+);

position token TokAnnotation ({"@"} ({"network"} | {"dataset"} | {"parameter"} | {"property"}));
position token TokPostulate {"@postulate"};

position token TokArrow     {"->"};
position token TokForallT   {"forallT"};
position token TokIf        {"if"};
position token TokThen      {"then"};
position token TokElse      {"else"};
position token TokDot       {"."};
position token TokElemOf    {":"};
position token TokLambda    {"\\"};
position token TokLet       {"let"};

position token TokType      {"Type"};
position token TokUnit      {"Unit"};
position token TokBool      {"Bool"};
position token TokNat       {"Nat"};
position token TokRat       {"Rat"};
position token TokVector    {"Vector"};
position token TokList      {"List"};
position token TokIndex     {"Index"};

position token TokForall    {"forall"};
position token TokExists    {"exists"};
position token TokForeach   {"foreach"};
position token TokImpl      {"=>"};
position token TokAnd       {"and"};
position token TokOr        {"or"};
position token TokNot       {"not"};
position token TokEq        {"=="};
position token TokNeq       {"!="};
position token TokLe        {"<="};
position token TokLt        {"<"};
position token TokGe        {">="};
position token TokGt        {">"};
position token TokMul       {"*"};
position token TokDiv       {"/"};
position token TokAdd       {"+"};
position token TokSub       {"-"};

position token TokNil        {"nil"};
position token TokCons       {"::"};
position token TokSeqOpen    {"["};
position token TokSeqClose   {"]"};
position token TokAt         {"!"};
position token TokZipWith    {"zipWith"};
position token TokMap        {"map"};
position token TokFold       {"fold"};
position token TokIndices    {"indices"};

position token TokHasLeq    {"HasLeq"};
position token TokHasEq     {"HasEq"};
position token TokHasNotEq  {"HasNotEq"};
position token TokHasAdd    {"HasAdd"};
position token TokHasSub    {"HasSub"};
position token TokHasMul    {"HasMul"};
position token TokHasFold   {"HasFold"};
position token TokHasMap    {"HasMap"};

position token TokAnnNameOpt  {"name"};
position token TokAnnInferOpt {"infer"};

-- NOTE: As order matters don't declare tokens after these ones!
position token Name        (letter (letter | digit | '_')*) ;
position token HoleToken   ({"?"} (letter | digit | '_')*);

separator Name "";

-- * Modalities

Irrelevant. Modality ::= "@0";

separator Modality "";

-- * Binders

ExplicitBinder. BasicBinder ::= "("  [Modality] Name TokElemOf Expr1 ")";
ImplicitBinder. BasicBinder ::= "{"  [Modality] Name TokElemOf Expr1 "}";
InstanceBinder. BasicBinder ::= "{{" [Modality] Name TokElemOf Expr1 "}}";

ExplicitNameBinder. NameBinder ::= [Modality] Name;
ImplicitNameBinder. NameBinder ::= "{" [Modality] Name "}";
InstanceNameBinder. NameBinder ::= "{{" [Modality] Name "}}";
BasicNameBinder.    NameBinder ::= BasicBinder;

separator NameBinder "";

ExplicitTypeBinder. TypeBinder ::= Expr13;
ImplicitTypeBinder. TypeBinder ::= "{" Expr1 "}";
InstanceTypeBinder. TypeBinder ::= "{{" Expr1 "}}";
BasicTypeBinder.    TypeBinder ::= BasicBinder;

-- separator TypeBinder "";

-- * Arguments

ExplicitArg. Arg ::= Expr15;
ImplicitArg. Arg ::= "{" Expr1 "}";
InstanceArg. Arg ::= "{{" Expr1 "}}";

-- * Individual let declarations

LDecl. LetDecl ::= NameBinder "=" Expr;

separator LetDecl ",";

-- * Literals

UnitLiteral.  Lit ::= "()";
NatLiteral.   Lit ::= Natural;
RatLiteral.   Lit ::= Rational;
BoolLiteral.  Lit ::= Boolean;


-- * Expressions

-- NOTE:
--
--   The syntax for expressions used by the parser is more general than that
--   permitted by our bidirectional typing, which allows us to emit an more
--   specific error message when we're missing a type annotation, rather than
--   emitting a parse error.
--
--   See https://github.com/BNFC/bnfc/issues/372 for why tokens
--   aren't used for `let` and `in`.

-- Kinds.
Type.    Expr14 ::= TokType;

-- Core structure.
Ann.     Expr   ::= Expr2 TokElemOf Expr1;
ForallT. Expr1  ::= TokForallT [NameBinder] TokDot Expr1;
Let.     Expr2  ::= TokLet [LetDecl] "in" Expr2;
Lam.     Expr2  ::= TokLambda [NameBinder] TokArrow Expr2;
Fun.     Expr11 ::= TypeBinder TokArrow Expr11;
App.     Expr13 ::= Expr13 Arg;
Var.     Expr15 ::= Name;
Literal. Expr15 ::= Lit;
Hole.    Expr15 ::= HoleToken;

-- Quantification
Forall.    Expr2 ::= TokForall [NameBinder] TokDot Expr2;
Exists.    Expr2 ::= TokExists [NameBinder] TokDot Expr2;
ForallIn.  Expr2 ::= TokForall NameBinder "in" Expr3 TokDot Expr2;
ExistsIn.  Expr2 ::= TokExists NameBinder "in" Expr3 TokDot Expr2;

-- Boolean expressions.
If.      Expr4  ::= TokIf Expr5 TokThen Expr5 TokElse Expr5;
Impl.    Expr5  ::= Expr6 TokImpl Expr5;
And.     Expr7  ::= Expr8 TokAnd Expr7;
Or.      Expr7  ::= Expr8 TokOr  Expr7;
Eq.      Expr8  ::= Expr9 TokEq  Expr9;
Neq.     Expr8  ::= Expr9 TokNeq Expr9;
Not.     Expr11 ::= TokNot Expr11;

-- Numeric expressions.
Le.      Expr8  ::= Expr8  TokLe  Expr9;
Lt.      Expr8  ::= Expr8  TokLt  Expr9;
Ge.      Expr8  ::= Expr8  TokGe  Expr9;
Gt.      Expr8  ::= Expr8  TokGt  Expr9;
Add.     Expr9  ::= Expr9  TokAdd Expr10;
Sub.     Expr9  ::= Expr9  TokSub Expr10;
Mul.     Expr10 ::= Expr10 TokMul Expr11;
Div.     Expr10 ::= Expr10 TokDiv Expr11;
Neg.     Expr11 ::= TokSub Expr11;

-- Lists and vectors.
Foreach.    Expr2  ::= TokForeach NameBinder TokDot Expr2;
VecLiteral. Expr15 ::= TokSeqOpen [Expr] TokSeqClose;
Nil.        Expr15 ::= TokNil;
Cons.       Expr4  ::= Expr5 TokCons Expr4;
At.         Expr12 ::= Expr12 TokAt Expr13;
ZipWith.    Expr15 ::= TokZipWith;
Map.        Expr15 ::= TokMap;
Fold.       Expr15 ::= TokFold;
Indices.    Expr15 ::= TokIndices;

-- Primitive types.
Unit.    Expr15 ::= TokUnit;
Bool.    Expr15 ::= TokBool;
Rat.     Expr15 ::= TokRat;
Nat.     Expr15 ::= TokNat;
List.    Expr14 ::= TokList;
Vector.  Expr14 ::= TokVector;
Index.   Expr14 ::= TokIndex;

-- Type classes.
HasEq.    Expr15 ::= TokHasEq;
HasNotEq. Expr15 ::= TokHasNotEq;
HasLeq.   Expr15 ::= TokHasLeq;
HasAdd.   Expr15 ::= TokHasAdd;
HasSub.   Expr15 ::= TokHasSub;
HasMul.   Expr15 ::= TokHasMul;
HasMap.   Expr15 ::= TokHasMap;
HasFold.  Expr15 ::= TokHasFold;

coercions Expr 15;
separator Expr ",";

-- * Annotation options

-- The LHS of an annotation is an `Expr` rather than a `Name` so we can capture
-- the builtin names `Bool` etc. which aren't captured by the `Name` class because
-- they necessarily have priority over it.
NameAnnOption.  DeclAnnOption ::= TokAnnNameOpt "=" Name;
InferAnnOption. DeclAnnOption ::= TokAnnInferOpt "=" Expr;
TypeAnnOption.  DeclAnnOption ::= Name "=" Expr;

separator DeclAnnOption ",";

-- * Declarations annotations

DeclAnnWithOpts.    DeclAnnOpts ::= "(" [DeclAnnOption] ")";
DeclAnnWithoutOpts. DeclAnnOpts ::= "";

-- * Declarations

DefAnn.       Decl ::= TokAnnotation DeclAnnOpts;
DefType.      Decl ::= "type" Name [NameBinder] "=" Expr;
DefFunType.   Decl ::= Name TokElemOf Expr;
DefFunExpr.   Decl ::= Name [NameBinder] "=" Expr;
DefPostulate. Decl ::= TokPostulate DeclAnnOpts;

separator Decl ";";

-- * Program

layout toplevel;

Main. Prog ::= [Decl]
