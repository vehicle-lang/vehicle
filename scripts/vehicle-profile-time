#!/bin/sh

# Script for profiling the time taken at various points in the Vehicle compiler.
# To profile a vehicle command of the form:
#
#    vehicle ARGS
#
# instead run:
#
#    ./scripts/vehicle-profile-time ARGS
#
# This will generate an HTML file in the `.profiling` folder that can be viewed in a
# browser.

# POSIX compliant method for 'pipefail':
fail=$(mktemp)

# Check if 'profiteur' is on the PATH:
PROFITEUR=$(which profiteur || echo > "$fail")

if [ -s "$fail" ]; then
    rm "$fail"
    echo "The vehicle-profile-time script requires 'profiteur' to visualise the profiling data."
    echo "You can install 'profiteur' by running:"
    echo
    echo "  cabal v2-install profiteur --ignore-project --overwrite-policy=always"
    echo
    echo "See: https://github.com/jaspervdj/profiteur#readme"
    exit 1
fi

# Create the directory for profiling files:
PROFILING_DIR=".profiling"
[ ! -s "$fail" ] && (mkdir -p "$PROFILING_DIR" || echo > "$fail")

# Create the timestamped filenames for profiling files:
TIMESTAMP=$(awk 'BEGIN{srand(); print srand()}')
PROFILING_PREFIX="$PROFILING_DIR/vehicle-$TIMESTAMP"
PROFILE_FILE="$PROFILING_PREFIX.prof"
PROFILE_HTML="$PROFILE_FILE.html"

# Build vehicle in heap profiling mode with the given options.
CABAL_BUILD="cabal -v1 --project-file=cabal.project.profile-time build vehicle:exe:vehicle"
[ ! -s "$fail" ] && ($CABAL_BUILD || echo > "$fail")

# On interrupt, kill Vehicle and reset trap.
_on_interrupt() {
    echo "Forward SIGINT to Vehicle"
    kill -INT "$CHILD_PID" 2>/dev/null
    trap - INT
}
trap _on_interrupt INT

# Run vehicle in heap profiling mode with the given options.
RTSOPTS="+RTS -po$PROFILING_PREFIX -p -RTS"
CABAL_RUN="cabal -v0 --project-file=cabal.project.profile-time run vehicle:exe:vehicle -- $* $RTSOPTS"
if [ ! -s "$fail" ]; then
    echo "$CABAL_RUN"
    $CABAL_RUN || echo > "$fail" &
    CHILD_PID=$!
    wait "$CHILD_PID"
    trap - INT
fi

# If no eventlog was generated, exit.
if [ ! -f "$PROFILE_FILE" ]; then
    echo "No profile data was generated; did you kill the process too soon?"
    exit 1
else
    # Convert the time profile to an HTML page.
    $PROFITEUR "$PROFILE_FILE" || echo > "$fail"

    # Output the path to the generated HTML page.
    [ -f "$PROFILE_HTML" ] && (echo "Wrote profile to $PROFILE_FILE.html")
fi

# Check whether or not any subcommand failed:
if [ -s "$fail" ]; then
    rm "$fail"
    echo "Error occurred while profiling; see above."
    exit 1
else
    rm "$fail"
fi
