#!/usr/bin/env cabal
{- cabal:
build-depends:
  , base     >=4       && <5
  , directory
  , extra
  , filepath
  , process  >=1.2.0.0 && <2

build-tool-depends: hie-bios:hie-bios
default-language:   Haskell2010
default-extensions: ImportQualifiedPost
ghc-options:        -Wall
-}
import Control.Monad (forM, unless)
import Control.Monad.Extra (partitionM)
import System.Directory (doesFileExist)
import System.Environment (getArgs)
import System.FilePath (isRelative)
import System.Process (spawnProcess, waitForProcess)
import System.Exit (ExitCode(..), exitWith)

main :: IO ()
main = do
  files <- getArgs

  -- Check that all the file arguments exist:
  (exist, notExist) <- partitionM doesFileExist files
  unless (null notExist) $ fail $ unlines $
    "Error: vehicle-hie-bios-check was called with non-existent file paths:"
      : ["- " <> file | file <- notExist]

  -- Check that all file paths are relative:
  let notRelative = filter (not . isRelative) files
  unless (null notRelative) $ fail $ unlines $
    "Error: vehicle-hie-bios-check was called with non-relative file paths:"
      : ["- " <> file | file <- notExist]

  exitCodes <-
    forM exist $ \file -> do
      putStrLn $ "Checking " <> file
      processHandle <- spawnProcess "hie-bios" ["check", file]
      waitForProcess processHandle

  -- Exit with success only if all calls to stylish-haskell succeeded
  let isSuccess ExitSuccess = True
      isSuccess _           = False
  exitWith $ if all isSuccess exitCodes then ExitSuccess else ExitFailure 1
