#!/bin/sh

# POSIX compliant method for 'pipefail':
fail=$(mktemp)

# Check if 'eventlog2html' is on the PATH:
EVENTLOG2HTML=$(which eventlog2html || echo > "$fail")

if [ -s "$fail" ]; then
    rm "$fail"
    echo "The vehicle-mem-profile script requires 'eventlog2html' to visualise the event log."
    echo "You can install 'eventlog2html' by running:"
    echo
    echo "  cabal v2-install eventlog2html --ignore-project --overwrite-policy=always"
    echo
    echo "See: https://mpickering.github.io/eventlog2html/"
    exit 1
fi

# Check the HEAP_PROFILE_TYPE setting:
HEAP_PROFILE_TYPE="${HEAP_PROFILE_TYPE--hT}"
if [ "$HEAP_PROFILE_TYPE" = "-hT" ]; then
  echo "Type of profile: Basic heap profile"
elif [ "$HEAP_PROFILE_TYPE" = "-hi" ]; then
  echo "Type of profile: Info table profile"
else
  echo "Usage: HEAP_PROFILE_TYPE=[-hT or -hi] ./scripts/vehicle-profile [VEHICLE OPTIONS]"
  echo "Error: expected HEAP_PROFILE_TYPE to be -hT or -hi, found $HEAP_PROFILE_TYPE"
fi

# Create the directory for profiling files:
PROFILING_DIR=".profiling"
[ ! -s "$fail" ] && (mkdir -p "$PROFILING_DIR" || echo > "$fail")

# Create the timestamped filenames for profiling files:
TIMESTAMP=$(awk 'BEGIN{srand(); print srand()}')
PROFILING_PREFIX="$PROFILING_DIR/vehicle-$TIMESTAMP"
EVENTLOG_FILE="$PROFILING_PREFIX$HEAP_PROFILE_TYPE.eventlog"

# Run vehicle in debug mode with the given options.
# Produce a heap profile grouped by closure type (-hT).
RTSOPTS="+RTS -po"$PROFILING_PREFIX" -ol"$EVENTLOG_FILE" -s -l "${HEAP_PROFILE_TYPE}" -RTS"
VEHICLE="cabal -v0 --project-file=cabal.project.mem-profile run vehicle:exe:vehicle --"
[ ! -s "$fail" ] && ($VEHICLE $@ $RTSOPTS || echo > "$fail")

# Convert the heap profile to an HTML page.
[ ! -s "$fail" ] && ($EVENTLOG2HTML "$EVENTLOG_FILE" || echo > "$fail")

# Output the path to the generated HTML page.
EVENTLOG_HTML="$EVENTLOG_FILE.html"
[ ! -s "$fail" ] && (echo "Wrote eventlog to $EVENTLOG_FILE.html")

# Check whether or not any subcommand failed:
if [ -s "$fail" ]; then
  rm "$fail"
  exit 1
else
  rm "$fail"
fi

# Get the current platform
SYSTEM=$(uname -s | cut -d- -f1)
if [ "$SYSTEM" = "CYGWIN_NT" \
  -o "$SYSTEM" = "MINGW32_NT" \
  -o "$SYSTEM" = "MINGW64_NT" \
  -o "$SYSTEM" = "MSYS_NT" ]; then
  PLATFORM="Windows"
elif [ "$SYSTEM" = "Darwin" ]; then
  PLATFORM="macOS"
elif [ "$SYSTEM" = "Linux" ]; then
  PLATFORM="Linux"
else
  echo "WARNING: Could not determine platform" >&2
fi

# Open the eventlog in a browser
if [ "$PLATFORM" = "macOS" ]; then
  open "$EVENTLOG_HTML"
fi
