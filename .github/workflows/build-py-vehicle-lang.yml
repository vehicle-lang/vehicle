name: Build py-vehicle-lang

on:
  workflow_call:
  workflow_dispatch:

env:
  DEFAULT_GHC_VERSION: "9.4.4"
  DEFAULT_CABAL_VERSION: "3.10.1.0"

jobs:
  build-py-vehicle-lang:
    name: py-vehicle-lang / ${{ matrix.os.name }} - Python ${{ matrix.python.version }}
    runs-on: ${{ matrix.os.tag }}

    strategy:
      matrix:
        os:
          # 01-04-2023:
          # All GitHub-hosted runners use an x86_64 architecture. If this changes,
          # the manylinux platform tags below must take this into account.
          # 03-04-2023:
          # We must specify an exact Ubuntu version, because each Ubuntu version
          # corresponds to an exact libc version, which must be passed to auditwheel,
          # as part of the manylinux tag:
          # - ubuntu-20.04 uses libc 2.31
          # - ubuntu-22.04 uses libc 2.35
          # In general, libc is FORWARDS but NOT BACKWARDS compatible, e.g., binaries
          # built against libc 2.31 can be run on a system with libc 2.35, but not the
          # other way around. You can get the libc version via Python by running:
          # ```python
          # import platform
          # print(platform.libc_ver())
          # ```
          - { tag: ubuntu-22.04, name: Linux, manylinux: manylinux_2_35_x86_64 }
          # 01-04-2023:
          # Ubuntu 20.04 has patchelf version 0.10, but the latest auditwheel
          # requires at least version 0.14.
          # - { tag: ubuntu-20.04, name: Linux, manylinux: manylinux_2_31_x86_64 }
          - { tag: windows-latest, name: Windows }
        python:
          - { version: "3.11", tag: "311" }
          - { version: "3.10", tag: "310" }
          - { version: "3.9", tag: "39" }
          - { version: "3.8", tag: "38" }
          - { version: "3.7", tag: "37" }
        include:
          # 17-04-2023:
          # On macOS, cibuildwheel compiles wheels for all supported Python versions,
          # so we do not have to include different Python versions in the matrix.
          - os: { tag: macos-latest, name: macOS }
            python: { version: "3.7", tag: "37" }

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup GHC ${{ env.DEFAULT_GHC_VERSION }}
        uses: haskell/actions/setup@v2
        with:
          ghc-version: ${{ env.DEFAULT_GHC_VERSION }}
          cabal-version: ${{ env.DEFAULT_CABAL_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.version }}
          cache: "pip"
          cache-dependency-path: "py-vehicle-lang/requirements-ci.txt"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-ci.txt
        shell: sh
        working-directory: "py-vehicle-lang"

      - name: Build wheel (macOS)
        if: runner.os == 'macOS'
        uses: pypa/cibuildwheel@v2.12.1
        with:
          package-dir: "py-vehicle-lang"
          output-dir: "py-vehicle-lang/wheelhouse"
          config-file: "{package}/pyproject.toml"

      - # 01-04-2023:
        # Windows builds with cibuildwheel cannot find pythonXY.lib from the venv
        name: Build wheel (Window)
        if: runner.os == 'Windows'
        run: |
          mkdir -p wheelhouse
          python -m build --wheel --outdir=wheelhouse
          delvewheel repair --wheel-dir=wheelhouse wheelhouse/*.whl
          pip install wheelhouse/vehicle_lang-*.whl
          pytest tests
        shell: sh
        working-directory: "py-vehicle-lang"

      - # 01-04-2023:
        # Linux builds with cibuildwheel on Linux use the manylinux docker images,
        # which do not come with GHC, and should be installed with CIBW_BEFORE_ALL.
        # The manylinux platform tags take architecture into account, so we check
        # that we're definitely running on an x86_64 architecture before building.
        name: Build wheel (Linux)
        if: runner.os == 'Linux' && runner.arch == 'X64'
        run: |
          mkdir -p wheelhouse
          python -m build --wheel --outdir=wheelhouselocal
          auditwheel repair --wheel-dir=wheelhouse --plat=${{ matrix.os.manylinux }} wheelhouselocal/*.whl
          pip install wheelhouse/vehicle_lang-*.whl
          pytest tests
        shell: sh
        working-directory: "py-vehicle-lang"

      - uses: actions/upload-artifact@v3
        with:
          name: wheelhouse
          path: ./py-vehicle-lang/wheelhouse/*.whl
