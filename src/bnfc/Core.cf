-- Grammar of Vehicle Core

comment "(*" "*)";

-- * ens

position token Builtin
  ( {"all"} | {"any"}
	| {"=>"} | {"and"} | {"or"}
	| {"=="} | {"!="} | {"<="} | {"<"} | {">="} | {">"}
	| {"*"} | {"/"} | {"+"} | {"-"} | {"~"} | {"!"} | {"not"}
	| {"->"} | {"Type"} | {"Tensor"} | {"Real"} | {"Nat"}
	| {"Bool"} | {"True"} | {"False"}
	| {"List"} | {"::"});

position token Name (lower (letter | digit | '_')*) ;

-- * Kinds

-- Core structure.
KApp.  Kind  ::= Kind Kind1;
KCon.  Kind1 ::= KindBuiltin;

coercions Kind 1;


-- * Types

-- Core structure.
TForall.  Type  ::= "forall" TypeBinder Type1;
TApp.     Type  ::= Type Type1;
TVar.     Type1 ::= TypeName;
TCon.     Type1 ::= TypeBuiltin;

-- Type-level dimensions.
TLitDim.  Type1 ::= Integer; -- NOTE: this means natural

-- Type-level lists.
TLitList. Type1 ::= "[" [Type1] "]";

separator Type1 "";

coercions Type 1;


-- * Expressions

-- Core structure.
EAnn.       Expr  ::= Expr ":type" Type;
ELet.       Expr  ::= "let" ExprBinder Expr1 Expr1;
ELam.       Expr  ::= "lambda" ExprBinder Expr1;
EApp.       Expr  ::= Expr Expr1;
EVar.       Expr1 ::= ExprName;
ETyApp.     Expr  ::= Expr "{" Type "}";
ETyLam.     Expr  ::= "lambda" TypeBinder Expr1;
ECon.       Expr1 ::= ExprBuiltin;

-- Naturals and reals.
ELitInt.    Expr1 ::= Integer; -- NOTE: this means natural
ELitReal.   Expr1 ::= Double;

-- Lists and tensors.
ELitSeq. Expr1 ::= "[" [Expr1] "]";

separator Expr1 "";

coercions Expr 1;


-- * Declarations

DeclNetw. Decl ::= "(" "declare-network" ExprBinder Type1 ")";
DeclData. Decl ::= "(" "declare-dataset" ExprBinder Type1 ")";
DefType.  Decl ::= "(" "define-type" TypeBinder "(" [TypeBinder] ")" Type1 ")";
DefFun.   Decl ::= "(" "define-fun" ExprBinder Type1 Expr1 ")";

separator Decl "";


-- * Program

Main. Prog ::= "(" [Decl] ")";


-- * Names for builtins, binders, and variables

MkKindBuiltin. KindBuiltin ::= Builtin;
MkTypeBuiltin. TypeBuiltin ::= Builtin;
MkExprBuiltin. ExprBuiltin ::= Builtin;

MkTypeBinder.  TypeBinder  ::= Name;
MkExprBinder.  ExprBinder  ::= Name;

MkTypeName.    TypeName    ::= Name;
MkExprName.    ExprName    ::= Name;

separator TypeBinder "";
