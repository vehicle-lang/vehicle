-- Grammar of Vehicle

comment "--";
comment "{-" "-}";

-- * Tokens

-- NOTE: Token rules are tried IN ORDER, so the order matters!

position token TokArrow    {"->"};      
position token TokForall   {"forall"};
position token TokExists   {"exists"};
position token TokIf       {"if"};
position token TokThen     {"then"};
position token TokElse     {"else"};
position token TokDot      {"."};
position token TokElemOf   {":"};
position token TokLambda   {"\\"};

position token TokType     {"Type"};
position token TokDim      {"Dim"};
position token TokTensor   {"Tensor"};
position token TokList     {"List"};
position token TokReal     {"Real"};
position token TokInt      {"Int"};
position token TokBool     {"Bool"};

position token TokAll      {"all"};
position token TokAny      {"any"};
position token TokImpl     {"=>"};
position token TokAnd      {"and"};
position token TokOr       {"or"};
position token TokNot      {"not"};
position token TokEq       {"=="};
position token TokNeq      {"!="};
position token TokLe       {"<="};
position token TokLt       {"<"};
position token TokGe       {">="};
position token TokGt       {">"};
position token TokMul      {"*"};
position token TokDiv      {"/"};
position token TokAdd      {"+"};
position token TokSub      {"-"};
position token TokAt       {"!"};

position token TokSeqOpen  {"["};
position token TokSeqClose {"]"};
position token TokCons     {"::"};
position token TokTrue     {"True"};
position token TokFalse    {"False"};

position token Name        (lower (letter | digit | '_')*) ;

separator Name "";


-- * Kinds

-- Core structure.
KApp.  Kind  ::= Kind Kind1;

-- Primitive kinds.
KFun.  Kind  ::= Kind1 TokArrow Kind;
KType. Kind1 ::= TokType;
KDim.  Kind1 ::= TokDim;
KList. Kind1 ::= TokList;

coercions Kind 1;


-- * Types

-- Core structure.
TForall.  Type  ::= TokForall [Name] TokDot Type;
TApp.     Type3 ::= Type3 Type4;
TVar.     Type4 ::= Name;

-- Primitive types.
TFun.     Type  ::= Type2 TokArrow Type;
TBool.    Type4 ::= TokBool;
TReal.    Type4 ::= TokReal;
TInt.     Type4 ::= TokInt;
TList.    Type4 ::= TokList;
TTensor.  Type4 ::= TokTensor;

-- Type-level dimensions.
TAdd.     Type2 ::= Type2 TokAdd Type3;
TLitDim.  Type4 ::= Integer; -- confusingly, this means natural

-- Type-level lists.
TCons.    Type1 ::= Type2 TokCons Type1;
TLitList. Type4 ::= TokSeqOpen [Type] TokSeqClose;

coercions Type 4;

separator Type ",";


-- * Expressions

-- NOTE:
--
--   The syntax for expressions used by the parser is more general than that
--   permitted by our bidirectional typing, which allows us to emit an more
--   specific error message when we're missing a type annotation, rather than
--   emitting a parse error.
--

layout "let";
layout stop "in";

-- Core structure.
EAnn.       Expr   ::= Expr1 TokElemOf Type;
ELet.       Expr1  ::= "let" "{" [Decl] "}" "in" Expr1;
ELam.       Expr2  ::= TokLambda [Name] TokArrow Expr2;
EApp.       Expr11 ::= Expr11 Expr12;
EVar.       Expr12 ::= Name;

-- NOTE: these aren't part of the surface syntax.
internal ETyApp. Expr ::= Expr Type;
internal ETyLam. Expr ::= TokLambda "{" [Name] "}" TokArrow Expr;

-- Conditional expressions.
EIf.        Expr1  ::= TokIf Expr2 TokThen Expr2 TokElse Expr2;
EImpl.      Expr4  ::= Expr5 TokImpl Expr4;
EAnd.       Expr5  ::= Expr6 TokAnd Expr5;
EOr.        Expr6  ::= Expr7 TokOr Expr6;
ENot.       Expr10 ::= TokNot Expr10;
ETrue.      Expr13 ::= TokTrue;
EFalse.     Expr13 ::= TokFalse;

-- Integers and reals.
EEq.        Expr7  ::= Expr8 TokEq Expr8;
ENeq.       Expr7  ::= Expr8 TokNeq Expr8;
ELe.        Expr7  ::= Expr8 TokLe Expr8;
ELt.        Expr7  ::= Expr8 TokLt Expr8;
EGe.        Expr7  ::= Expr8 TokGe Expr8;
EGt.        Expr7  ::= Expr8 TokGt Expr8;
EMul.       Expr8  ::= Expr8 TokMul Expr9;
EDiv.       Expr8  ::= Expr8 TokDiv Expr9;
EAdd.       Expr9  ::= Expr9 TokAdd Expr10;
ESub.       Expr9  ::= Expr9 TokSub Expr10;
ENeg.       Expr10 ::= TokSub Expr10;
ELitInt.    Expr13 ::= Integer;
ELitReal.   Expr13 ::= Double;

-- Lists and tensors.
ECons.      Expr3  ::= Expr4 TokCons Expr3;
EAt.        Expr11 ::= Expr11 TokAt Expr12;
EAll.       Expr13 ::= TokAll;
EAny.       Expr13 ::= TokAny;
ELitSeq.    Expr13 ::= TokSeqOpen [Expr] TokSeqClose;

coercions Expr 13;

separator Expr ",";


-- * Declarations

DeclNetw.   Decl ::= "network" Name TokElemOf Type;
DeclData.   Decl ::= "dataset" Name TokElemOf Type;
DefType.    Decl ::= Name [Name] "=" Type;
DefFunType. Decl ::= Name TokElemOf Type;
DefFunExpr. Decl ::= Name [Name] "=" Expr;

separator Decl ";";


-- * Program

layout toplevel;

Main. Prog ::= [Decl]
