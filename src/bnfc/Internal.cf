-- Grammar of the Vehicle Internal language

comment "(*" "*)";

-- * Tokens

position token BuiltinToken
  ( {"forall"} | {"exists"}
  | {"=>"} | {"and"} | {"or"} | {"not"}
  | {"=="} | {"!="} | {"<="} | {"<"} | {">="} | {">"}
  | {"*"} | {"/"} | {"+"} | {"-"} | {"~"}
  | {"Unit"} | {"Nat"} | {"Int"} | {"Index"}
  | {"Bool"}
  | {"Tensor"} | {"List"} | {"::"} | {"!"}
  );
position token NameToken (lower (letter | digit | '_')*) ;
position token BoolToken ({"True"} | {"False"}) ;
position token HoleToken ({"?"} (letter | digit | '_')*);
position token TypeToken ({"Type"} digit+);

position token Natural (digit+ '.' digit+);
position token Rational (digit+ '.' digit+);

-- * Binders

RelevantExplicitBinder.   Binder ::= "(" NameToken ":" Expr ")";
RelevantImplicitBinder.   Binder ::= "{" NameToken ":" Expr "}";
RelevantInstanceBinder.   Binder ::= "{{" NameToken ":" Expr "}}";
IrrelevantExplicitBinder. Binder ::= ".(" NameToken ":" Expr ")";
IrrelevantImplicitBinder. Binder ::= ".{" NameToken ":" Expr "}";
IrrelevantInstanceBinder. Binder ::= ".{{" NameToken ":" Expr "}}";

-- * Function arguments

RelevantExplicitArg.   Arg ::= Expr1;
RelevantImplicitArg.   Arg ::= "{" Expr "}";
RelevantInstanceArg.   Arg ::= "{{" Expr "}}";
IrrelevantExplicitArg. Arg ::= ".(" Expr ")";
IrrelevantImplicitArg. Arg ::= ".{" Expr "}";
IrrelevantInstanceArg. Arg ::= ".{{" Expr "}}";

-- * Literals

UnitLiteral. Lit ::= "()";
NatLiteral.  Lit ::= Natural;
RatLiteral.  Lit ::= Rational;
BoolLiteral. Lit ::= BoolToken;

-- * Core structure.

Ann.           Expr  ::= Expr1 ":" Expr1;
Pi.            Expr  ::= "pi" Binder Expr1;
Let.           Expr  ::= "let" Binder Expr1 Expr1;
Lam.           Expr  ::= "lambda" Binder Expr1;
App.           Expr  ::= Expr1 Arg;
Type.          Expr1 ::= TypeToken;
Builtin.       Expr1 ::= BuiltinToken;
Var.           Expr1 ::= NameToken;
Literal.       Expr1 ::= Lit;
LVec.          Expr1 ::= "[" [Expr1] "]";
Hole.          Expr1 ::= HoleToken;

coercions Expr 1;
separator Expr1 ",";

-- * Declarations

DeclNetw.      Decl ::= "(" "declare-network"        NameToken Expr1 ")";
DeclData.      Decl ::= "(" "declare-dataset"        NameToken Expr1 ")";
DeclParam.     Decl ::= "(" "declare-parameter"      NameToken Expr1 ")";
DeclImplParam. Decl ::= "(" "declare-impl-parameter" NameToken Expr1 ")";
DeclPost.      Decl ::= "(" "declare-postulate"      NameToken Expr1 ")";
DefFun.        Decl ::= "(" "define-fun"             NameToken Expr1 Expr1 ")";

separator Decl "";

-- * Program

Main. Prog ::= "(" [Decl] ")";

